<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>低配Win10部署TensorFlow1.15GPU版+Keras2.15深度学习环境</title>
    <link href="/2020/11/27/%E4%BD%8E%E9%85%8DWin10%E9%83%A8%E7%BD%B2TensorFlow1-15GPU%E7%89%88-Keras2-15%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83/"/>
    <url>/2020/11/27/%E4%BD%8E%E9%85%8DWin10%E9%83%A8%E7%BD%B2TensorFlow1-15GPU%E7%89%88-Keras2-15%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<p># 低配Win10部署TensorFlow1.15GPU版+Keras2.15深度学习环境</p><p>最近打算参加一个 NLP 文本分类比赛（顺便水一下数据挖掘实验大作业），遇到一些好用的开源模型，可惜没有 PyTorch 版的，又得下回 TensorFlow1.0+ 版的了，顺便记录一下安装过程，还是挺顺利的~</p><h3 id="0x00-安装前提"><a class="markdownIt-Anchor" href="#0x00-安装前提"></a> 0x00 安装前提</h3><ol><li>装好 Anaconda 环境</li><li>装好 NVIDIA 显卡驱动</li></ol><p>我的机器配置可以看我之前写的文章<a href=""></a></p><h3 id="0x01-安装步骤"><a class="markdownIt-Anchor" href="#0x01-安装步骤"></a> 0x01 安装步骤</h3><p>如果前面前提搞定了后面安装就两步</p><ol><li>建环境</li><li>安装</li></ol><h4 id="建环境"><a class="markdownIt-Anchor" href="#建环境"></a> 建环境</h4><p>在命令行执行指令创建一个新环境用来安装 TensorFLow，以下遇到([y]/n)?都一路按y回车</p><pre><code class="hljs bash">conda create --name tf1 python=3.6</code></pre><p>–name 后面是你自己定义的环境名称，我这里就是 tf1，后面指定环境所用的 python 版本为3.6</p><p>切换到刚刚建好的环境</p><pre><code class="hljs bash">conda activate tf1</code></pre><h4 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h4><p>安装 TensorFlow 1.15 版本和GPU版本</p><pre><code class="hljs bash">conda install tensorflow==1.15.0conda install --channel https://conda.anaconda.org/hanyucui tensorflow-gpu=1.15</code></pre><p>conda方式下载安装时不需要指定cudatoolkit的版本，因为conda会解决这种版本依赖问题同时会自动安装好CUDA所对应的cuDNN。</p><p>每个虚拟环境都需要单独安装它所对应的CUDA以及cuDNN，所以按照同样的方式新建一个环境又可以装另一个版本的 TensorFlow 环境。</p><p>安装好之后就可以测试一下效果啦</p><h3 id="0x02-安装测试"><a class="markdownIt-Anchor" href="#0x02-安装测试"></a> 0x02 安装测试</h3><p>键入python进入交互环境，随便找了别人<a href="https://zhuanlan.zhihu.com/p/107683614">文章</a>写的一段代码代码测试了一下</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tfgpu_ok = tf.test.is_gpu_available()print(<span class="hljs-string">&quot;tf version:&quot;</span>, tf.__version__)print(<span class="hljs-string">&quot;use GPU&quot;</span>, gpu_ok)</code></pre><p>结果如下：</p><p><img src="https://i.loli.net/2020/11/27/z82XOl3bGMdYsgx.png" srcset="/img/loading.gif" alt="image-20201127005843813" /></p><p>我只有一块渣渣GPU所以就显示设备0，blabla…总之有输出就证明安装成功啦~</p><p>后面就自己随便玩了~</p><p>我自己是准备比赛就装了个NLP工具库 kashgari，还有分词工具包 jieba</p><pre><code class="hljs bash">pip3 install jiebapip3 install <span class="hljs-string">&quot;kashgari&gt;=1.1,&lt;2.0&quot;</span></code></pre><p>如果pip用不了可以试下改成pip3</p><p>下好上面的包自然就把keras下载了</p><p>暂时这样，Over~</p>]]></content>
    
    
    
    <tags>
      
      <tag>环境部署</tag>
      
      <tag>深度学习</tag>
      
      <tag>TensorFlow</tag>
      
      <tag>Keras</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云端部署数据科学开发环境Anaconda+Jupyterlab</title>
    <link href="/2020/11/10/%E4%BA%91%E7%AB%AF%E9%83%A8%E7%BD%B2%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83Anaconda-Jupyterlab/"/>
    <url>/2020/11/10/%E4%BA%91%E7%AB%AF%E9%83%A8%E7%BD%B2%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83Anaconda-Jupyterlab/</url>
    
    <content type="html"><![CDATA[<p>最近借舍友账号薅了阿里云云翼计划送的一台ECS服务器，选了 Ubuntu20.04 系统，打算开一个端口来和队友跑实验用，因为是同一个环境所以可以避免各种包版本不同而出的问题，出bug也可以一块解决。还有一个很赞就是，我可以用我的 iPad 甚至手机打开云端环境随时看代码，随时coding！</p><p>下面我将给出我的环境部署流程以及部署时遇到的坑和对策。</p><p>内容大致分为两部分，部署 Anaconda + 部署 Jupyterlab。</p><p>愿君有所获。</p><h2 id="0x00-云端准备"><a class="markdownIt-Anchor" href="#0x00-云端准备"></a> 0x00 云端准备</h2><h3 id="配置安全组"><a class="markdownIt-Anchor" href="#配置安全组"></a> 配置安全组</h3><p>阿里云在后台有一些安全措施限制了一些端口对外开放以确保系统安全。</p><p>进入后台点击头像那里下面有一个安全配置，设置好对外开放的端口范围即可</p><p>我一次性设置了好几个，对于jupyter来说就是你在前面配置的端口号，我配置的是8888，那么在安全组规则里就写一个8888或者8888/8890（意思是包括8888在内到8889之间的端口，其他端口号同理）</p><p>详情可见阿里云文档<a href="https://help.aliyun.com/document_detail/25471.html?spm=a2c4g.11186623.6.899.2fc72976cOcJrd">添加安全组规则</a></p><h2 id="0x01-部署anaconda"><a class="markdownIt-Anchor" href="#0x01-部署anaconda"></a> 0x01 部署Anaconda</h2><h3 id="下载anaconda"><a class="markdownIt-Anchor" href="#下载anaconda"></a> 下载Anaconda</h3><pre><code class="hljs bash">wget -P /tmp https://repo.anaconda.com/archive/Anaconda3-2020.02-Linux-x86_64.sh</code></pre><h3 id="安装anaconda"><a class="markdownIt-Anchor" href="#安装anaconda"></a> 安装Anaconda</h3><pre><code class="hljs bash">bash /tmp/Anaconda3-2020.02-Linux-x86_64.sh</code></pre><p>中间可能有一个设置安装路径的，我没理…一路回车yes完事~</p><h3 id="激活anaconda环境"><a class="markdownIt-Anchor" href="#激活anaconda环境"></a> 激活Anaconda环境</h3><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc</code></pre><h3 id="更新所有包"><a class="markdownIt-Anchor" href="#更新所有包"></a> 更新所有包</h3><pre><code class="hljs bash">conda update --all</code></pre><h3 id="创建环境"><a class="markdownIt-Anchor" href="#创建环境"></a> 创建环境</h3><p>创建一个基于 python3.6 名为 jupyter 的conda环境</p><pre><code class="hljs bash">conda create -n jupyter python=3.6</code></pre><h3 id="激活环境"><a class="markdownIt-Anchor" href="#激活环境"></a> 激活环境</h3><pre><code class="hljs bash">conda activate jupyter</code></pre><h3 id="conda环境迁移"><a class="markdownIt-Anchor" href="#conda环境迁移"></a> conda环境迁移</h3><h4 id="导出本地conda环境"><a class="markdownIt-Anchor" href="#导出本地conda环境"></a> 导出本地conda环境</h4><pre><code class="hljs bash">conda env <span class="hljs-built_in">export</span> &gt; environment.yaml</code></pre><p>将该配置文件上传到阿里云某个文件夹下</p><h4 id="导入环境"><a class="markdownIt-Anchor" href="#导入环境"></a> 导入环境</h4><pre><code class="hljs bash">conda env create -f environment.yaml</code></pre><p>文件路径应该具体到某个位置下，如果要重新命名则可以在后面加一个</p><pre><code class="hljs bash">-n 新环境名称</code></pre><p>最后我的导入环境命令如下：</p><pre><code class="hljs bash">conda env create -f ./root/environment.yaml -n myjupyter</code></pre><p>不过我并没有使用之前的conda环境，后面又重新配置了一个。</p><h4 id="迁移出错对策"><a class="markdownIt-Anchor" href="#迁移出错对策"></a> 迁移出错对策</h4><h5 id="导入报错"><a class="markdownIt-Anchor" href="#导入报错"></a> 导入报错</h5><p>导入时有可能会出现下面的报错</p><pre><code class="hljs shell">Warning: you have pip-installed dependencies in your environment file, but you do not list pip itself as one of your conda dependencies.  Conda may not use the correct pip to install your packages, and they may end up in the wrong place.  Please add an explicit pip dependency.  I&#x27;m adding one for you, but still nagging you.</code></pre><h5 id="解决方案"><a class="markdownIt-Anchor" href="#解决方案"></a> 解决方案</h5><p>在yaml配置文件中的依赖下面加一行</p><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-string">pip</span></code></pre><h3 id="更换conda源"><a class="markdownIt-Anchor" href="#更换conda源"></a> 更换conda源</h3><p>由于访问国外源下载资源可能会比较慢，一般更换成国内的源，下面使用清华源，阿里淘宝中科大等其他源同理，可以找对应官网查看。</p><pre><code class="hljs awk">conda config --add channels https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>pkgs<span class="hljs-regexp">/free/</span>conda config --add channels https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud/conda-forge conda config --add channels https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud<span class="hljs-regexp">/msys2/</span><span class="hljs-comment"># 设置搜索时显示通道地址</span>conda config --set show_channel_urls yes</code></pre><p>假如想直接写进配置文件里也可以用编辑器打开.condarc文件编辑来加入想要的源。</p><pre><code class="hljs bash">vim ~/.condarc</code></pre><p>往配置文件加入下面的文本即可</p><pre><code class="hljs bash">channels:  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/  - defaultsshow_channel_urls: <span class="hljs-literal">true</span></code></pre><p>假如换源时出现</p><pre><code class="hljs bash">ConfigurationLoadError: Unable to load configuration file.  path: /root/.condarc  reason: invalid yaml at line 2, column 0</code></pre><p>可能是哪里配置出了小问题，没关系，直接将对应路径文件删除即可</p><pre><code class="hljs bash">rm /root/.condarc</code></pre><p>然后还是按照换源的步骤重新配置一下即可。</p><h3 id="配置开发环境"><a class="markdownIt-Anchor" href="#配置开发环境"></a> 配置开发环境</h3><p>这个环境看自己需要来配置啦，我自己配的是 PyTorch ，因为跑实验用的是基于 PyTorch 框架写的代码。</p><h4 id="配置-pytorch-环境"><a class="markdownIt-Anchor" href="#配置-pytorch-环境"></a> 配置 PyTorch 环境</h4><p>这里配置的是GPU版，反正GPU版也能用CPU，torch 版本是1.6.0，在<a href="https://pytorch.org/get-started/locally/#supported-linux-distributions">PyTorch官网</a>看自己的需要来装就好。</p><pre><code class="hljs bash">conda install pytorch torchvision cudatoolkit=10.2 -c pytorch</code></pre><p>如果 torch 下载太慢安装出错了可以参考一下这篇文章的解决办法 <a href="https://blog.csdn.net/k5722166/article/details/91331016">pytorch1.1.0安装教程</a></p><p>P.S. 如果想了解在 Win10上部署 PyTorch GPU版开发环境可以参考我这一篇教程<a href="https://blog.rickyxu.cc/2020/10/29/%E4%BD%8E%E9%85%8D-win10-%E9%83%A8%E7%BD%B2-pytorch-gpu-%E7%8E%AF%E5%A2%83%EF%BC%88win10-mx150-cuda10-2%EF%BC%89/">低配 Win10 部署 PyTorch-GPU 环境（Win10+mx150+CUDA10.2）</a></p><p>进行完上面这些步骤之后anaconda算是已经部署完成了。</p><h2 id="0x02-部署-jupyter-服务"><a class="markdownIt-Anchor" href="#0x02-部署-jupyter-服务"></a> 0x02 部署 Jupyter 服务</h2><h3 id="安装-jupyterlab"><a class="markdownIt-Anchor" href="#安装-jupyterlab"></a> 安装 Jupyterlab</h3><pre><code class="hljs bash">conda install jupyter jupyterlab</code></pre><p>遇到什么 yes or no 的就一直 y 就ok了</p><h3 id="设置-jupyter-登入密码"><a class="markdownIt-Anchor" href="#设置-jupyter-登入密码"></a> 设置 Jupyter 登入密码</h3><p>安全起见一般要设置好登陆密码，当然也可以不设置（不推荐）。</p><p>Jupyterlab 安装好之后输入ipython回车进入IPython交互环境，然后输入下面两行，键入密码，确认密码。</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> notebook.auth <span class="hljs-keyword">import</span> passwdpasswd()</code></pre><p><img src="https://i.loli.net/2020/11/10/TXiPf1qmK4ux9gO.png" srcset="/img/loading.gif" alt="image-20201026205833949" /></p><pre><code class="hljs python"><span class="hljs-string">&#x27;argon2:$argon2id$v=19$m=10240,t=10,p=8$Q7DXnvrOurcEo50YfUdbYA$kzzuUEzrXvg6USTan07KUA&#x27;</span></code></pre><p>将上图中输出的一串字符串先记下来，后面设置登陆密码时要用。</p><p>如果想要重置密码则再进行一次这个步骤即可。</p><h3 id="配置-jupyter-服务"><a class="markdownIt-Anchor" href="#配置-jupyter-服务"></a> 配置 Jupyter 服务</h3><p>不同的路径可能命令也不同，根据自己的来配置。</p><p>找到 jupyter_notebook_config.py 这个文件，然后用vim打开编辑。</p><pre><code class="hljs bash">vim /root/.jupyter/jupyter_notebook_config.py</code></pre><p>会发现里面一堆配置，莫慌</p><p>vim模式下输入命令</p><pre><code class="hljs python">:/你要查询的字段</code></pre><p>即可快速找到你要修改的字段所在位置。</p><p>例如：输入 :/c.NotebookApp.ip 即可快速找到 c.NotebookApp.ip 这个字段所在位置，以此类推。</p><pre><code class="hljs python"><span class="hljs-comment"># 将ip设置为*，允许任何IP访问</span>c.NotebookApp.ip = <span class="hljs-string">&#x27;*&#x27;</span><span class="hljs-comment"># 这里的密码就是之前生成的那一串</span>c.NotebookApp.password = <span class="hljs-string">&#x27;argon2:$argon2id$v=19$m=10240,t=10,p=8$Q7DXnvrOurcEo50YfUdbYA$kzzuUEzrXvg6USTan07KUA&#x27;</span><span class="hljs-comment"># 服务器上并没有浏览器可以供Jupyter打开</span>c.NotebookApp.open_browser = <span class="hljs-literal">False</span><span class="hljs-comment"># 监听端口设置为8888或其他自己喜欢的端口</span>c.NotebookApp.port = <span class="hljs-number">8888</span><span class="hljs-comment"># 我们可以修改jupyter的工作目录，也可以保持原样不变，如果修改的话，要保证这一目录已存在</span>c.MappingKernelManager.root_dir = <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment">#c.MappingKernelManager.root_dir = &#x27;/root/anaconda3/envs/jupyter&#x27;</span><span class="hljs-comment"># 允许远程访问</span>c.NotebookApp.allow_remote_access = <span class="hljs-literal">True</span></code></pre><p>修改完成之后输入vim命令保存退出</p><pre><code class="hljs BASH">:wq</code></pre><h3 id="切换执行环境"><a class="markdownIt-Anchor" href="#切换执行环境"></a> 切换执行环境</h3><p>Jupyterlab 中切换不同的 Python 环境</p><p>在本地端连接服务器时一般需要运行不同的Python环境或者在不同环境下安装包，本地端的网页显示需要的python环境需要先装载进 kernel ，执行命令如下：</p><pre><code class="hljs bash">python -m ipykernel install --user --name xxx(环境名称) --display-name <span class="hljs-string">&quot;your name&quot;</span>（显示名称）</code></pre><p>一般步骤是进入需要添加kernel的Python环境，然后写入配置。</p><p>比如我的 conda 环境名叫 jupyter，我想要将它添加到 Jupyterlab 的 kernel 并命名显示为 PyTorch1.6.0，那就输入下面两行</p><pre><code class="hljs bash">conda activate jupyterpython -m ipykernel install --user --name jupyter --display-name <span class="hljs-string">&quot;PyTorch1.6.0&quot;</span></code></pre><p>这时候就可以在 Jupyterlab 里选择名为 PyTorch1.6.0 的环境了。</p><h3 id="运行-jupyter-服务"><a class="markdownIt-Anchor" href="#运行-jupyter-服务"></a> 运行 Jupyter 服务</h3><p>这时候应该可以运行 Jupyter 服务了，可以输入下面的命令运行一下，</p><pre><code class="hljs bash">jupyter lab --allow-root</code></pre><p><img src="https://i.loli.net/2020/11/10/brzf48hgJxRBqv1.png" srcset="/img/loading.gif" alt="image-20201026211621766" /></p><p>会看到有实时显示服务运行日志，想要终止服务则按 Ctrl + C 。</p><p>再去浏览器输入类似于这样的地址<em><a href="http://xx.xxx.xxx.xxx:8888/lab">http://xx.xxx.xxx.xxx:8888/lab</a>?</em>（服务器公网ip地址:8888）就会进到 Jupyterlab 界面了，第一次打开可能要加载一段时间，进去之后输入之前配置的密码就完事儿啦~</p><p>之后你会发现你退出终端后jupyter的服务也一起关了，怎么让他在后台一直开着以便我随时访问呢？</p><p>这时候就要用到下面的命令，后台运行挂起服务</p><pre><code class="hljs bash">nohup jupyter lab --allow-root &gt; jupyter.log 2&gt;&amp;1 &amp;</code></pre><p>nohup表示no hang up, 就是不挂起，&amp;将服务放在后台运行，这样命令执行后即使终端退出, 也不会停止服务运行。 &gt; jupyter.log 的作用是将之前实时打印的日志输出到 jupyter.log 里。</p><h3 id="结束-jupyter-服务"><a class="markdownIt-Anchor" href="#结束-jupyter-服务"></a> 结束 Jupyter 服务</h3><p>若想结束 Jupyter 服务则输入命令 ps 列出当前在运行的进程</p><p><img src="https://i.loli.net/2020/11/10/IPFa8hM4ZO1C2oy.png" srcset="/img/loading.gif" alt="image-20201026215508941" /></p><p>找到 jupyter-lab 服务的 pid ，然后 kill pid 终止进程。（我这个不知道为什么没有kill成功，可能是当前会话还没有关闭？）</p><h3 id="jupyterlab-插件"><a class="markdownIt-Anchor" href="#jupyterlab-插件"></a> Jupyterlab 插件</h3><p>没有用 Jupyter Notebook 而是用 Jupyterlab 的原因主要是因为jupyterlab有插件功能，相当于强化版的 Jupyter Notebook，目前市场上有的插件暂时还没有很多，希望以后会和 VScode 的插件一样丰富吧。</p><p>大部分插件都是基于 Nodejs ，所以要下载一个。输入下面的命令下载即可。</p><pre><code class="hljs bash">conda install nodejs</code></pre><p>一堆插件自己看着下载，我自己也还没怎么用，代码补全功能那个插件有些坑，之后考虑出篇插件推荐。</p><p>以上全部步骤配置完之后应该就能正常访问你的云端数据科学开发环境了，拿起你的键盘，就这样踏上数据科学的旅途吧~</p>]]></content>
    
    
    
    <tags>
      
      <tag>Anaconda</tag>
      
      <tag>Jupyterlab</tag>
      
      <tag>数据科学</tag>
      
      <tag>环境部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>低配 Win10 部署 PyTorch-GPU 深度学习环境（Win10+mx150+CUDA10.2）</title>
    <link href="/2020/10/29/%E4%BD%8E%E9%85%8D-Win10-%E9%83%A8%E7%BD%B2-PyTorch-GPU-%E7%8E%AF%E5%A2%83%EF%BC%88Win10-mx150-CUDA10-2%EF%BC%89/"/>
    <url>/2020/10/29/%E4%BD%8E%E9%85%8D-Win10-%E9%83%A8%E7%BD%B2-PyTorch-GPU-%E7%8E%AF%E5%A2%83%EF%BC%88Win10-mx150-CUDA10-2%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p># 低配 Win10 部署 PyTorch-GPU 深度学习环境（Win10+mx150+CUDA10.2）</p><h2 id="0x00-写在前面"><a class="markdownIt-Anchor" href="#0x00-写在前面"></a> 0x00 写在前面</h2><p>本文可能不适用于所有人，只是作为我自己的一次记录，完文时间是2020.7.14，一直存在本地没找时间发布，时隔4月直至今天才发。文章大致分为四部分：我的配置、安装 CUDA 、安装 cuDNN 和安装 PyTorch ，只希望读者读完之后能省时间，少踩坑，愿君有所获。</p><h3 id="我的配置清单"><a class="markdownIt-Anchor" href="#我的配置清单"></a> 我的配置清单</h3><p>笔电型号配置: 小米Pro（2018版8G+256G原配固态+256G自加固态）</p><p>OS: Win10 Pro Education 64-bit（家庭版应该也差不多）</p><p>GPU: GeForce MX150</p><p>使用Anaconda进行python包管理</p><p>提前装好 Visual Studio 2015或以上版本（community即可）</p><h3 id="探探情况"><a class="markdownIt-Anchor" href="#探探情况"></a> 探探情况</h3><p>先去<a href="https://pytorch.org/">PyTorch官网</a>看看最新稳定版支持什么</p><p><img src="https://i.loli.net/2020/10/29/aBqGKeASiwyFsgm.png" srcset="/img/loading.gif" alt="image-20200714175513350" /></p><p>可以看到它支持Windows系统，且当你用conda来管理python包时，使用GPU训练CUDA可选的版本是9.2、10.1、10.2</p><p>如果使用CPU训练那么可以选择none，不使用CUDA加速。</p><p>虽然MX150真的很辣鸡，但我这里选择的版本依然还是GPU版。</p><p>下面是详细步骤，按我步骤来包你1h搞定（此处使用了夸张的修辞手法）。</p><h2 id="0x01-安装cuda"><a class="markdownIt-Anchor" href="#0x01-安装cuda"></a> 0x01 安装CUDA</h2><h3 id="查看支持的cuda版本"><a class="markdownIt-Anchor" href="#查看支持的cuda版本"></a> 查看支持的CUDA版本</h3><p>更新好驱动后就查看你的驱动所支持的CUDA版本</p><p>打开NVIDIA控制面板-&gt;帮助-&gt;系统信息-&gt;组件</p><p>查看支持版本。</p><p><img src="https://i.loli.net/2020/10/29/kED43Qu6Aor7Gwe.png" srcset="/img/loading.gif" alt="image-20200714173403609" /></p><p>如果发现版本不够高的话可以选择其他版本，如CUDA10.1，大致的流程也是类似的。</p><p>或者可以选择更新驱动到最新版本，我这里驱动更新到最新版时对应的CUDA版本恰好为10.2。</p><h3 id="更新驱动"><a class="markdownIt-Anchor" href="#更新驱动"></a> 更新驱动</h3><p>将显卡驱动升级到最新版本（我的驱动程序版本是442.50）</p><p>可以去NVIDIA官网下载更新，也可以用驱动精灵检测更新。之前装tensorflow时找配适的驱动在官网装感觉有点麻烦，所以这次我直接用驱动精灵装，一路按提示安装就行了，感觉比较省事。（驱动精灵用完就可以卸载了，就一工具软件。）</p><h3 id="下载对应版本的cuda"><a class="markdownIt-Anchor" href="#下载对应版本的cuda"></a> 下载对应版本的CUDA</h3><p>到官网下载<a href="https://developer.nvidia.com/cuda-10.2-download-archive?target_os=Windows&amp;target_arch=x86_64&amp;target_version=10&amp;target_type=exelocal">CUDA10.2</a></p><p>随便点一个都可以下载，这里建议选择下载到local，使用第三方下载器估计会比较快。</p><p>对Windows用户来说，大多数深度学习框架底层是基于C/C++开发的，需要提前装好 Visual Studio 2015或以上版本。</p><p>下载好后点击exe文件，也是一路按提示安装就完事儿。</p><h3 id="安装验证"><a class="markdownIt-Anchor" href="#安装验证"></a> 安装验证</h3><p>在命令行输入</p><pre><code class="hljs bash">nvcc -V</code></pre><p>如果输出结果如下图所示返回CUDA版本号10.2，说明安装成功。</p><p><img src="https://i.loli.net/2020/10/29/QRiVTaUMdlztBZ2.png" srcset="/img/loading.gif" alt="image-20200714182810649" /></p><h2 id="0x02-安装cudnn"><a class="markdownIt-Anchor" href="#0x02-安装cudnn"></a> 0x02 安装cuDNN</h2><h3 id="下载安装"><a class="markdownIt-Anchor" href="#下载安装"></a> 下载安装</h3><p>进入<a href="https://developer.nvidia.com/rdp/cudnn-download">官网</a>登录后下载cuDNN v7.6.5 for CUDA 10.2</p><p><img src="https://i.loli.net/2020/10/29/kg4r7UwMzmCxBHi.png" srcset="/img/loading.gif" alt="image-20200714183949020" /></p><p>这一步选择对应的CUDA版本即可，我选择<a href="https://developer.nvidia.com/compute/machine-learning/cudnn/secure/7.6.5.32/Production/10.2_20191118/cudnn-10.2-windows10-x64-v7.6.5.32.zip">cuDNN Library for Windows 10</a>，下载后得到一个zip压缩包，里面包含了bin、include、lib三个文件夹，解压，把各个文件夹里的文件放到 C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA下同名的文件夹，配置好环境变量即可。</p><p>如果前面没有自定义安装路径，按照默认则需要添加下面两个路径：</p><p>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2</p><p>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2\lib\x64</p><h3 id="安装验证-2"><a class="markdownIt-Anchor" href="#安装验证-2"></a> 安装验证</h3><p>在路径C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2\extras\demo_suite下打开命令行输入</p><pre><code class="hljs bash">./bandwidthtest.exe</code></pre><p>得到下图的结果说明安装成功</p><p><img src="https://i.loli.net/2020/10/29/4gzvjbdTrQwOhYe.png" srcset="/img/loading.gif" alt="image-20200714205713708" /></p><p>此外，还可以添加<code>C:\Program Files\NVIDIA Corporation\NVSMI\</code>到系统变量中，查看显卡使用情况时就可以直接在命令行输入</p><pre><code class="hljs bash">nvidia-smi</code></pre><p>得到显卡使用情况</p><p><img src="https://i.loli.net/2020/10/29/zuE1DINkqAVmBs5.png" srcset="/img/loading.gif" alt="image-20200714214650508" /></p><h2 id="0x03-安装pytorch"><a class="markdownIt-Anchor" href="#0x03-安装pytorch"></a> 0x03 安装PyTorch</h2><h3 id="anaconda换源"><a class="markdownIt-Anchor" href="#anaconda换源"></a> Anaconda换源</h3><p>如果不换源会下载龟速以至于不能实现1h内搞定这个教程，这里我用了清华的源。</p><p>打开Anaconda Prompt</p><p>先创建一个命名为pytorch_gpu的python版本为3.6的环境</p><pre><code class="hljs bash">conda create -n pytorch_gpu pip python=3.6</code></pre><p>激活pytorch_gpu环境</p><pre><code class="hljs bash">conda activate pytorch_gpu</code></pre><p>查看Anaconda配置</p><pre><code class="hljs bash">conda config --show</code></pre><p>添加清华源</p><pre><code class="hljs bash">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/menpo/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</code></pre><p>设置搜索时显示通道地址</p><pre><code class="hljs bash">conda config --<span class="hljs-built_in">set</span> show_channel_urls yes</code></pre><p>然后在PyTorch官网那里复制conda的命令</p><pre><code class="hljs bash">conda install pytorch torchvision cudatoolkit=10.2 -c pytorch</code></pre><p>把其中的 -c pytorch去掉</p><p>在命令行中输入</p><pre><code class="hljs bash">conda install pytorch torchvision cudatoolkit=10.2</code></pre><p>上面所有步骤中需要下载的话输入y回车就好。</p><p>等待下载完成。</p><h3 id="pytorch安装验证"><a class="markdownIt-Anchor" href="#pytorch安装验证"></a> PyTorch安装验证</h3><p>运行简单的样例代码测试，例如打印出随机生成的张量矩阵，以及gpu是否可以使用。</p><p>首先在命令行输入python，进入python的解释器，依次输入以下命令，每输入一句回车</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchx = torch.rand(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>)print(x)torch.cuda.is_available()</code></pre><p>运行内容类似于以下则说明PyTorch安装成功且支持GPU计算：</p><pre><code class="hljs bash">&gt;&gt;&gt; import torch&gt;&gt;&gt; x = torch.rand(5,3)&gt;&gt;&gt; <span class="hljs-built_in">print</span>(x)tensor([[0.9752, 0.3114, 0.4016],        [0.9716, 0.3168, 0.8434],        [0.5170, 0.6517, 0.4141],        [0.5586, 0.6290, 0.4637],        [0.8503, 0.0334, 0.4124]])&gt;&gt;&gt; torch.cuda.is_available()True</code></pre><h2 id="0x04-致谢"><a class="markdownIt-Anchor" href="#0x04-致谢"></a> 0x04 致谢</h2><p>感谢前人留下的足迹，这篇文章才能顺利走到这里，接下来开始你的炼丹之旅吧~</p><p><a href="https://zhuanlan.zhihu.com/p/131595687">win10+mx150环境下安装cuda，cudnn，pytorch-gpu</a></p><p><a href="https://zhuanlan.zhihu.com/p/54350088">windows10下安装GPU版pytorch简明教程</a></p><p><a href="https://zhuanlan.zhihu.com/p/94220564">win10安装CUDA和cuDNN的正确姿势</a></p><p><a href="https://blog.csdn.net/xo3ylAF9kGs/article/details/104104041">pytorch慢到无法安装，该怎么办？</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>环境部署</tag>
      
      <tag>PyTorch</tag>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2018/09/23/hello-world/"/>
    <url>/2018/09/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
