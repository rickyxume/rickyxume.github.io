<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数据库CMU15-445 搭建Docker实验环境</title>
    <link href="/2021/04/09/CMU15-445_docker_bustub_env/"/>
    <url>/2021/04/09/CMU15-445_docker_bustub_env/</url>
    
    <content type="html"><![CDATA[<p># 数据库CMU15-445 搭建Docker实验环境</p><h2 id="0-搭建docker实验环境"><a class="markdownIt-Anchor" href="#0-搭建docker实验环境"></a> #0 - 搭建Docker实验环境</h2><p>win10端基于WSL2部署docker实验环境</p><h3 id="克隆git仓库"><a class="markdownIt-Anchor" href="#克隆git仓库"></a> 克隆Git仓库</h3><p>找个空文件夹克隆仓库</p><p>命令格式为：git clone 仓库的https链接</p><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> --depth=1 https://hub.fastgit.org/cmu-db/bustub.git</code></pre><blockquote><p>这句用的是github的镜像链接，可以加速。</p></blockquote><p>进入仓库文件夹</p><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> cmu-db</code></pre><h3 id="docker构建"><a class="markdownIt-Anchor" href="#docker构建"></a> Docker构建</h3><p>执行docker命令，构建容器镜像</p><pre><code class="hljs bash">docker build . -t bustub</code></pre><blockquote><p>注意这一步可能要很久，构建好之后</p></blockquote><p><em>下面docker命令仅供参考，可以看一下相关文章，后续再写一篇常用docker命令</em></p><p>查看所有正在运行的容器</p><pre><code class="hljs bash">docker ps -a</code></pre><p>执行命令运行并进入容器</p><pre><code class="hljs bash">docker run -it bustub /bin/bash</code></pre><p>启动并进入容器</p><pre><code class="hljs bash">docker start -a -i 容器id</code></pre><p>退出容器</p><pre><code class="hljs bash"><span class="hljs-built_in">exit</span></code></pre><h3 id="配置本地目录挂载"><a class="markdownIt-Anchor" href="#配置本地目录挂载"></a> 配置本地目录挂载</h3><p>最后一步我们需要配置以下docker和本地目录的挂载来实现在本地修改在docker中自动同步<br />执行下面的命令</p><pre><code class="hljs bash">docker container run -it -v D:/myDevs/Docker/CMU-db:/bustub --name=bustub_env bustub /bin/bash</code></pre><blockquote><p>注意这里的 D:/myDevs/Docker/CMU-db 替换成你自己想要同步的目录，冒号 : 右边的 /bustub 也替换成你自己想要命名的目录，–name 可以自定义容器名，这里是 bustub_env</p></blockquote><h3 id="配置文件环境"><a class="markdownIt-Anchor" href="#配置文件环境"></a> 配置文件环境</h3><p>在WSL环境下执行</p><pre><code class="hljs bash">build_support/packages.shmkdir build<span class="hljs-built_in">cd</span> buildcmake ..make</code></pre><p>遇到提示&quot;bad interpreter: No such file or directory&quot;的问题可以看一下我的踩坑记录<a href="https://blog.rickyxu.cc/2021/04/08/shell_file_type_problem/">Shell格式问题导致执行出错解决方案</a></p><p>完成上面的操作之后我们的配置就算完成了。<br />接下来我们可以在本机的编译器编写我们的代码。然后在docer中的虚拟容器上编译和运行我们的代码</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>CMU 15-445</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CMU</tag>
      
      <tag>数据库</tag>
      
      <tag>Docker</tag>
      
      <tag>环境部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell格式问题导致执行出错解决方案</title>
    <link href="/2021/04/08/shell_file_type_problem/"/>
    <url>/2021/04/08/shell_file_type_problem/</url>
    
    <content type="html"><![CDATA[<p># Shell格式问题导致执行出错解决方案</p><h2 id="踩坑描述"><a class="markdownIt-Anchor" href="#踩坑描述"></a> 踩坑描述</h2><p>在进行CMU15-445数据库实验环境配置时，执行 build_support/packages.sh 脚本提示出错</p><blockquote><p>-bash: build_support/packages.sh: /bin/bash^M: bad interpreter: No such file or directory</p></blockquote><p>这个错误主要是由于shell文件是dos格式，即每一行结尾以\r\n来标识，而unix格式的文件行尾则以\n来标识。</p><h2 id="解决方案"><a class="markdownIt-Anchor" href="#解决方案"></a> 解决方案</h2><p>查看文件格式</p><pre><code class="hljs bash">vi build_support/packages.sh</code></pre><p><img src="https://i.loli.net/2021/04/09/L5zWDqcyxmtwSeV.png" srcset="/img/loading.gif" alt="image-20210409125124010" /></p><p>可以看到文件是dos格式。</p><p>按一下ESC键后输入vim命令，设置文件格式为unix</p><pre><code class="hljs routeros">:<span class="hljs-builtin-name">set</span> <span class="hljs-attribute">ff</span>=unix</code></pre><p>保存修改并退出vim</p><pre><code class="hljs clojure"><span class="hljs-symbol">:wq</span></code></pre><p>再次执行shell脚本即可</p><p>P.S. 如果提示权限不够，命令前加上sudo</p>]]></content>
    
    
    <categories>
      
      <category>覆辙</category>
      
    </categories>
    
    
    <tags>
      
      <tag>踩坑记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git常规操作</title>
    <link href="/2021/04/07/git_record/"/>
    <url>/2021/04/07/git_record/</url>
    
    <content type="html"><![CDATA[<p># Git常规操作</p><p>本篇文章记录一下git的常规操作流程</p><p>假设电脑上已经配置好git，已建好git仓库，去仓库下面copy地址。</p><p><img src="https://i.loli.net/2021/04/07/ohucYGTWtVJXQ3L.png" srcset="/img/loading.gif" alt="image-20210407215536008" /></p><h2 id="0-本地新建空文件夹"><a class="markdownIt-Anchor" href="#0-本地新建空文件夹"></a> 0、本地新建空文件夹</h2><p>避免文件夹重复导致出错，建议建一个</p><h2 id="1-克隆仓库"><a class="markdownIt-Anchor" href="#1-克隆仓库"></a> 1、克隆仓库</h2><p>右键 -&gt; <strong>Git Bash Here</strong></p><p><img src="https://i.loli.net/2021/04/07/QsKWu1Et9VId3AY.png" srcset="/img/loading.gif" alt="image-20210407215918321" /></p><p>在git命令行里操作</p><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/账号名/仓库名.git</code></pre><p><img src="https://i.loli.net/2021/04/07/SrVkX3IOc1gjeZK.png" srcset="/img/loading.gif" alt="image-20210407220224198" /></p><p>得到一个仓库同名的文件夹</p><h2 id="2-进入仓库文件夹"><a class="markdownIt-Anchor" href="#2-进入仓库文件夹"></a> 2、进入仓库文件夹</h2><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> 仓库文件夹名</code></pre><h2 id="3-自己操作"><a class="markdownIt-Anchor" href="#3-自己操作"></a> 3、自己操作</h2><p>建文件夹、新增文件、修改代码、blabla自己操作</p><h2 id="4-提交推送"><a class="markdownIt-Anchor" href="#4-提交推送"></a> 4、提交推送</h2><pre><code class="hljs bash">git initgit add .git commit -m <span class="hljs-string">&quot;你提交时的备注信息&quot;</span>git push</code></pre><p><strong>git init</strong> ：gti初始化；</p><p><strong>git add .</strong> ：提交到缓存区，注意加点前要空格，&quot;add .&quot;意思是添加所有文件；</p><p><strong>git commit -m “blabla”</strong> ：将暂存区里的改动提交到本地的版本库，注意备注信息规范化，便于回溯bug历史版本；</p><p><strong>git push</strong> ：将本地版本库的分支推送到远程服务器上对应的github仓库分支（可能会提示输入账号密码，提前配置好账号密码则不需要输入）空文件夹不会被上传</p><p><img src="https://i.loli.net/2021/04/07/62UdJ3MI4OLrDCj.png" srcset="/img/loading.gif" alt="image-20210407220707230" /></p>]]></content>
    
    
    <categories>
      
      <category>实用向</category>
      
      <category>实用工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学术绝配系列1：LaTex + VS Code</title>
    <link href="/2021/04/07/latex_vscode/"/>
    <url>/2021/04/07/latex_vscode/</url>
    
    <content type="html"><![CDATA[<p># 学术绝配系列1：LaTex + VS Code</p><p>学术绝配系列后续不一定会出，走科研这条路再继续。</p><p>官网指路：<a href="https://www.latex-project.org/">LaTex 官网</a> <a href="https://code.visualstudio.com/">VS Code 官网</a></p><p>如果跟着本文步骤走完，不出意外的话，你可以获得一个舒适的学术写作和排版体验。</p><h2 id="配置-latex-环境"><a class="markdownIt-Anchor" href="#配置-latex-环境"></a> 配置 LaTex 环境</h2><h3 id="0x01下载-latex"><a class="markdownIt-Anchor" href="#0x01下载-latex"></a> 0x01下载 LaTex</h3><p>进入<a href="https://www.tug.org/texlive/acquire-iso.html">Acquiring TeX Live as an ISO image - TeX Users Group (tug.org)</a>后点击<a href="https://mirrors.bfsu.edu.cn/CTAN/systems/texlive/Images/">从附近的镜像站下载</a>)</p><p><img src="https://i.loli.net/2020/12/01/t5FHT2UyYuqviDE.png" srcset="/img/loading.gif" alt="image-20201201130403761" /></p><p>找到名为 texlive2020.iso 的文件点击下载</p><p><img src="https://i.loli.net/2020/12/01/DtuWPcFihXp5RLO.png" srcset="/img/loading.gif" alt="image-20201201130527758" /></p><h3 id="0x02-安装-latex"><a class="markdownIt-Anchor" href="#0x02-安装-latex"></a> 0x02 安装 LaTex</h3><p>用电脑自带的资源管理器打开iso文件，内容如下：</p><p><img src="https://i.loli.net/2020/12/02/TjuBf8aJHyx1Eer.png" srcset="/img/loading.gif" alt="image-20201202144407515" /></p><p>点击里面名为 install-tl-windows.bat 的批处理文件，弹出来下面这个小人儿~</p><p><img src="https://i.loli.net/2020/12/02/8EczfLajerRdQKW.png" srcset="/img/loading.gif" alt="image-20201202144702306" /></p><p>等一下下就会进到安装界面，这里就可以改改安装路径。</p><p><img src="https://i.loli.net/2020/12/02/8IGHPVRTknbEWJC.png" srcset="/img/loading.gif" alt="image-20201202144727550" /></p><p>点击左下角的高级设置 Advanced ，点击中间最底下的按钮 Customize</p><p><img src="https://i.loli.net/2020/12/02/ZrEkWa5fQVqsm2S.png" srcset="/img/loading.gif" alt="image-20201202144946157" /></p><p>左边只勾选中文 (Chinese) 和英文 (US and UK English)，右边可以去掉 TeXWorks editor，还有更好的选择，比如说 Tex Studio。</p><p><img src="https://i.loli.net/2020/12/02/YWqGpocO2k619eC.png" srcset="/img/loading.gif" alt="image-20201202145218221" /></p><p>确定之后安装，等的有点久，可以放一边做其他事。</p><p><img src="https://i.loli.net/2020/12/02/gPMHVmetAwQjFEi.png" srcset="/img/loading.gif" alt="image-20201202145340380" /></p><p>安装完成之后界面如下：</p><p><img src="https://i.loli.net/2020/12/02/pMnZr1LxW5ahUwd.png" srcset="/img/loading.gif" alt="image-20201202170349620" /></p><p>可以打开cmd 输入 text -v 测试下有没有安装成功</p><pre><code class="hljs bash">tex -v</code></pre><p>有输出就说明安装成功啦~</p><p><img src="https://i.loli.net/2020/12/02/7qWgUXPKnLBTkhE.png" srcset="/img/loading.gif" alt="image-20201202173917071" /></p><h2 id="配置-vs-code"><a class="markdownIt-Anchor" href="#配置-vs-code"></a> 配置 VS Code</h2><p>VS Code 真的是一个很强大的编辑器，因其插件丰富，能做很多事情，其实它和什么插件搭配都是很棒的选择，因为轻便，和 LaTex 搭配则可以很方便地进行学术论文的排版和写作。</p><p>进官网直接选择合适的版本下载安装即可，不赘述了。</p><h3 id="0x03-下载-vs-code-插件-tex-workshop"><a class="markdownIt-Anchor" href="#0x03-下载-vs-code-插件-tex-workshop"></a> 0x03 下载 VS Code 插件 Tex Workshop</h3><p>点进插件侧栏（四个方块那个图标）</p><p>点搜索框键入 LaTeX Workshop 搜索插件并下载第一个</p><p><img src="https://i.loli.net/2020/12/08/XCEIMeOJukw2Gl7.png" srcset="/img/loading.gif" alt="image-20201208090455435" /></p><p>这里由于我已经下载了所以没有显示 install 下载按钮。</p><p>不出意外的话，应该在这里就搞定了，如果不行的话可能是json文件需要配配置一下</p><h3 id="0x04-latex-workshop的json文件配置"><a class="markdownIt-Anchor" href="#0x04-latex-workshop的json文件配置"></a> 0x04 LaTex Workshop的json文件配置</h3><p>留个坑，以后写…（当时本来是很流畅的配置完的，因为备考就忘了写…）</p>]]></content>
    
    
    <categories>
      
      <category>实用向</category>
      
      <category>实用工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LaTex</tag>
      
      <tag>VS Code</tag>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>获取QQ群成员数据的方法</title>
    <link href="/2021/02/07/get_qq_info_via_js/"/>
    <url>/2021/02/07/get_qq_info_via_js/</url>
    
    <content type="html"><![CDATA[<p># 获取QQ群成员数据的方法</p><p>打开浏览器进入网址 <a href="https://qun.qq.com/member.html#gid=%E7%BE%A4%E5%8F%B7">https://qun.qq.com/member.html#gid=群号</a></p><p>一直往下翻，加载完所有的群员后，在F12控制台输入js脚本</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> n=$(<span class="hljs-string">&#x27;#groupMember .list tr.mb&#x27;</span>);<span class="hljs-keyword">var</span> t=<span class="hljs-string">&#x27;QQ,昵称,群名片,性别,入群日期,最后发言日期\n&#x27;</span>;<span class="hljs-function"><span class="hljs-title">for</span>(<span class="hljs-params"><span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;n.length;i++</span>)</span> &#123;    <span class="hljs-keyword">var</span> nn = n[i].children[<span class="hljs-number">2</span>].children[<span class="hljs-number">2</span>].innerText;    <span class="hljs-keyword">var</span> mp = n[i].children[<span class="hljs-number">3</span>].children[<span class="hljs-number">0</span>].innerText;    <span class="hljs-keyword">var</span> qq = n[i].children[<span class="hljs-number">4</span>].innerText;    <span class="hljs-keyword">var</span> sex = n[i].children[<span class="hljs-number">5</span>].innerText;    <span class="hljs-keyword">var</span> enter_date = n[i].children[<span class="hljs-number">7</span>].innerText;    <span class="hljs-keyword">var</span> last_talk = n[i].children[<span class="hljs-number">8</span>].innerText;    t += qq + <span class="hljs-string">&#x27;,&#x27;</span>+ nn.trim() + <span class="hljs-string">&#x27;,&#x27;</span> + mp.trim() + <span class="hljs-string">&#x27;,&#x27;</span> + sex.trim() + <span class="hljs-string">&#x27;,&#x27;</span> + enter_date.trim() + <span class="hljs-string">&#x27;,&#x27;</span> + last_talk.trim() + <span class="hljs-string">&#x27;\n&#x27;</span>;&#125;<span class="hljs-built_in">console</span>.log(t);</code></pre><p>就可以得到csv格式的输出，复制到文件中即可分析数据</p><p><img src="https://i.loli.net/2021/04/17/cJ9a6XpyifGMVRm.png" srcset="/img/loading.gif" alt="image-20210417211614936" /></p><p>我这里复制进 VS Code（加了csv高亮插件，看起来舒服），然后 Ctrl + S 保存文件。</p><p><img src="https://i.loli.net/2021/04/17/FugMpxKfd2Z3SQe.png" srcset="/img/loading.gif" alt="image-20210417211742812" /></p><p>发现 VS Code 底下还有个类似SQL查询的东西，按照它提示的语法试了试模糊查询。</p><p><img src="https://i.loli.net/2021/04/17/TegBo4JLMSUNkvC.png" srcset="/img/loading.gif" alt="image-20210417211438649" /></p><p>运行查询语句后输出一个csv新文件</p><p><img src="https://i.loli.net/2021/04/17/JhN3DErIBfW5kew.png" srcset="/img/loading.gif" alt="image-20210417212401821" /></p><p>然后我就可以初步得到一个结论——22考研的至少有295人</p><p>里面可能混进去了一些考隔壁专业的，不过问题不大，全按人数只增不减来计算。</p><p>接着 Ctrl + F 搜索一下“学”字，就可以知道大概有多少名意向报考学硕了。同理搜“专”就可以知道专硕报考情况，剩下的就全归为摇摆不定。</p><p>P.S.老师说过几天把那些不改名片的全踢了，等那时候数据大概率会准确很多。</p><p>这个办法真妙啊😎</p>]]></content>
    
    
    <categories>
      
      <category>实用向</category>
      
      <category>奇淫巧技</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tips</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译原理2-词法分析</title>
    <link href="/2021/01/05/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%862-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/"/>
    <url>/2021/01/05/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%862-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p># 编译原理2-词法分析</p><h2 id="20-状态转换图与正规表达式"><a class="markdownIt-Anchor" href="#20-状态转换图与正规表达式"></a> 2.0 状态转换图与正规表达式</h2><p><strong>状态转换图</strong>：有限的有向图。圆圈（结点）表示状态，其间用有向边连接，边上可标记字符，表示某一状态接受有向边上的字符/字符集输入后到达另一状态。必有一初态及若干终态，终态结点用双圈表示。终态上用 “ * ”标识表明识别符号时多读了一个其它字符要予以回退，即去掉到终态的有向边上的字符。</p><p>[图以后补]</p><p>将状态转换图的概念通过正规式加以形式化。</p><p><strong>正规表达式（正规式）</strong>：形式化的表示法，可以表示单词符号的结构，从而精确地定义单词符号集。其表示的集合即正规集。</p><p><img src="https://i.loli.net/2021/04/07/tQbiTKa9pW2U186.png" srcset="/img/loading.gif" alt="image-20210407231608719" /></p><p><strong>闭包</strong></p><p><img src="https://i.loli.net/2021/04/07/cZ7Y9ijHyRUWlLI.png" srcset="/img/loading.gif" alt="image-20210407231655360" /></p><p>如果正规集相等则正规式等价。</p><p><img src="https://i.loli.net/2021/04/07/8y6VYPuLNro5dfx.png" srcset="/img/loading.gif" alt="image-20210407231808227" /></p><p>(α+ β)*= (α* + β*)*= (α* β*)*</p><p>给出语言推正规表达式：最小连接递增倍数闭包</p><h2 id="21-状态转换图的实现词法分析器示例"><a class="markdownIt-Anchor" href="#21-状态转换图的实现词法分析器示例"></a> 2.1 状态转换图的实现（词法分析器示例）</h2><p>简单的词法分析器示例，书p13图2-5：</p><p>重要函数解释：</p><p>token：用来存单词符号的字符串。</p><p>concatenation()：将token中的字符串与扫描到的字符连接得到新的token。</p><p>getbe()：过滤空格读字符。</p><p>letter() 和 digit()：分别用于判断字符类型是否为字母和是否为数字。</p><p>retract()：扫描指针回退一个字符，并把字符变量置空。</p><p>reserve()：查是否为保留字，不是则为标识符，返回0。</p><p>buildlist()：将标识符登记到符号表中或将常数登记到常数表中。</p><p>error()：出现非法字符报错。</p><p>关键部分代码：</p><pre><code class="hljs c">token=&#x27;&#x27;; //初始化token数组s=getchar(); <span class="hljs-comment">//读字符</span>getbe(); <span class="hljs-comment">//过滤空格</span><span class="hljs-keyword">switch</span>(s)&#123;    <span class="hljs-comment">//遇到字母时</span><span class="hljs-keyword">case</span><span class="hljs-number">&#x27;</span>a<span class="hljs-number">&#x27;</span>:    ...    <span class="hljs-keyword">case</span><span class="hljs-number">&#x27;</span>z<span class="hljs-number">&#x27;</span>:        <span class="hljs-keyword">while</span>(letter()||digit()) <span class="hljs-comment">//当读到字母或数字时</span>        &#123;            concatenation(); <span class="hljs-comment">//连接组成新token</span>            getchar(); <span class="hljs-comment">//继续读下一个字符</span>        &#125;        <span class="hljs-comment">//读到非字母或数字之后跳出循环</span>        retract(); <span class="hljs-comment">//扫描指针回退一个字符。由于while时多读了一个字符，要退回去再判断</span>        c=reserve(); <span class="hljs-comment">//读一个字符c，判断c是不是保留字</span>        <span class="hljs-keyword">if</span>(c==<span class="hljs-number">0</span>) <span class="hljs-comment">//如果是标识符（不是保留字）</span>        &#123;            buildlist(); <span class="hljs-comment">//将标识符登记到符号表里</span>            <span class="hljs-keyword">return</span>(id,指向id的符号表入口指针);        &#125;        <span class="hljs-keyword">else</span>        &#123;            retrn(保留字码,null);        &#125;        <span class="hljs-keyword">break</span>; <span class="hljs-comment">//到达终态</span>    <span class="hljs-comment">//遇到数字时</span>    <span class="hljs-keyword">case</span><span class="hljs-number">&#x27;0&#x27;</span>:    ...    <span class="hljs-keyword">case</span><span class="hljs-number">&#x27;9&#x27;</span>:        <span class="hljs-keyword">while</span>(digit())        &#123;            concatenation();            getchar();        &#125;        retract();        buildlist();        <span class="hljs-keyword">return</span>(num,num的常数表入口指针);       <span class="hljs-keyword">break</span>;    <span class="hljs-keyword">case</span><span class="hljs-number">&#x27;.</span>.<span class="hljs-number">.&#x27;</span>:        <span class="hljs-keyword">return</span>(...,...);        <span class="hljs-keyword">break</span>;            <span class="hljs-keyword">default</span>:        error(); <span class="hljs-comment">//剩下的都是非法字符，读到就报错</span>&#125;</code></pre><h2 id="22-有限自动机fa"><a class="markdownIt-Anchor" href="#22-有限自动机fa"></a> 2.2 有限自动机FA</h2><p>有限自动机是更一般化的状态转换图，分为两种：确定有限自动机DFA和非确定有限自动机NFA。</p><h3 id="221-dfanfa的表示及区别"><a class="markdownIt-Anchor" href="#221-dfanfa的表示及区别"></a> 2.2.1 DFA&amp;NFA的表示及区别</h3><p>有限自动机的表示：五元组（有限状态集，有穷输入字母表，所有的映射函数，初态或初态集，终态集）</p><p><img src="https://i.loli.net/2021/04/07/wcRGt4oFIu5ElLq.png" srcset="/img/loading.gif" alt="image-20210407231915331" /></p><p>区别2即：从同一个状态出发同一字符的出边有多个状态的就是NFA，一个的就是DFA。</p><p>DFA输入字符中没有空串ε，NFA中有。</p><p>DFA的集合为 ( )，NFA的集合为 { }。</p><h3 id="222-状态转换图和状态转换矩阵"><a class="markdownIt-Anchor" href="#222-状态转换图和状态转换矩阵"></a> 2.2.2 状态转换图和状态转换矩阵</h3><p><img src="https://i.loli.net/2021/04/07/yvgQXfL5NsbF4la.png" srcset="/img/loading.gif" alt="image-20210407232006778" /></p><p>FA M 和 FA M’的等价条件，L(M)=L(M’)，即能识别的字符串集相同。</p><p>对于任一给定的NFA M，一定存在一个DFA M’ 使得L(M)=L(M’)，因此，DFA是NFA的特例。</p><h3 id="由正规表达式构造fa"><a class="markdownIt-Anchor" href="#由正规表达式构造fa"></a> 由正规表达式构造FA</h3><h4 id="1r-等价构造-nfarnfa"><a class="markdownIt-Anchor" href="#1r-等价构造-nfarnfa"></a> （1）<strong>R 等价构造 NFA（R=&gt;NFA）</strong></h4><p>把R表达式一个一个按优先级拆开，逐个按规则画成拓广转换图。</p><p>[书上p21例2.6图2-12以后放]</p><h4 id="2用子集法对nfa-确定化nfa-dfa"><a class="markdownIt-Anchor" href="#2用子集法对nfa-确定化nfa-dfa"></a> （2）<strong>用子集法对NFA 确定化（NFA=&gt; DFA）</strong></h4><p>用<strong>子集法</strong>对给定的NFA构造等价的DFA步骤：</p><p><img src="https://i.loli.net/2021/04/07/MKyifDr83F4JTtX.png" srcset="/img/loading.gif" alt="image-20210407232049200" /></p><p><img src="https://i.loli.net/2021/04/07/sOFkvfaUYHpB8RE.png" srcset="/img/loading.gif" alt="image-20210407232151866" /></p><p><img src="https://i.loli.net/2021/04/07/HrbIcEvhoNdOYC3.png" srcset="/img/loading.gif" alt="image-20210407232229067" /></p><p>根据状态转换表可以得到还没化简的DFA</p><h3 id="化简dfa"><a class="markdownIt-Anchor" href="#化简dfa"></a> 化简DFA</h3><p>找一个比 DFA M 状态数少的 DFA M’ 使得 L(M)=L(M’)，DFA M’ 满足 1）无多余状态； 2）状态集不存在两个相互等价的状态（即不存在从两个状态出发都能识别同一输入字符串而停于终态）</p><p><strong>子集划分法</strong>，消除多余状态，合并等价状态。</p><p>步骤如下：</p><p>先划分终态组和非终态组，再分别考察直至子集不可划分。(可以看转换矩阵的右边是否一样，一样的分一块)</p><p>等价可以一块走就凑一块，不等价走不到一块就分开。</p><p>把分好组的都排一块编个号</p><h2 id="各种表示互相转换"><a class="markdownIt-Anchor" href="#各种表示互相转换"></a> 各种表示互相转换</h2><p>FA五元组&lt;-&gt;状态转换图&lt;-&gt;状态转换矩阵</p><p>典型例题p24 视频词法分析4》21:30</p>]]></content>
    
    
    <categories>
      
      <category>编译原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编译原理</tag>
      
      <tag>CS基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译原理1-引论&amp;概述</title>
    <link href="/2021/01/03/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%861-%E5%BC%95%E8%AE%BA-%E6%A6%82%E8%BF%B0/"/>
    <url>/2021/01/03/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%861-%E5%BC%95%E8%AE%BA-%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<p># 编译原理1-引论&amp;概述</p><h2 id="11程序设计语言与编译"><a class="markdownIt-Anchor" href="#11程序设计语言与编译"></a> 1.1程序设计语言与编译</h2><p>（1）程序设计语言</p><ul><li><p>高级语言</p></li><li><p>汇编语言</p></li><li><p>机器语言</p></li></ul><p>在计算机上如何执行一个高级语言程序？</p><ul><li>把高级语言程序翻译成机器语言程序</li><li>运行所得的机器语言程序求得计算结果</li></ul><p>（2）程序设计语言的转换</p><p><strong>翻译</strong>：是指能把某种语言的源程序，在不改变语义的条件下，转换成另一种语言程序——目标语言程序。</p><p><strong>编译</strong>：专指由高级语言转换为低级语言</p><p><strong>解释</strong>：接受某高级语言的一个语句输入，进行解释并控制计算机执行，马上得到这句的执行结果， 然后再接受下一句。</p><p>解释的特点</p><p>– 以源程序作为输入，不产生目标程序，一边解释一边执行。</p><p>– 优点：直观易懂，结构简单，易于实现人机对话</p><p>– 缺点：效率低</p><p>编译的转换过程</p><ul><li>两阶段转换：编译-&gt;运行</li><li>三阶段转换：编译-&gt;汇编-&gt;运行</li></ul><p><img src="https://i.loli.net/2021/01/03/Cty4wWaBJlHDZur.png" srcset="/img/loading.gif" alt="image-20201225164239321" /></p><p><em>(二者除红框内不一样外其他都一样)</em></p><h2 id="12编译程序概述"><a class="markdownIt-Anchor" href="#12编译程序概述"></a> 1.2编译程序概述</h2><p>编译程序的工作</p><p>可类比自然语言的翻译（识别单词、分析语法、分析语句含义、修饰译文、得出终稿）</p><p>对应过程如下：</p><p><img src="https://i.loli.net/2021/01/03/AtkpYXM28gSlNIb.png" srcset="/img/loading.gif" alt="image-20210102214933652" /></p><h3 id="121-词法分析"><a class="markdownIt-Anchor" href="#121-词法分析"></a> 1.2.1 词法分析</h3><ul><li><p>任务：输入源程序，对构成源程序的字符串进行扫描和分解，识别出一个个的单词。</p></li><li><p>单词：是高级语言中有实在意义的最小语法单位， 它由字符构成。</p></li></ul><p>词法分析依照词法规则，识别出正确的单词，转换成统一规格，备用。</p><ul><li>转换：对基本字、运算符、界限符、标识符和常数的转换</li></ul><p>转换完成后的格式：（类号、内码）</p><ul><li>描述词法规则的有效工具是<strong>正规式</strong>和<strong>有限自动机</strong></li></ul><h3 id="122-语法分析"><a class="markdownIt-Anchor" href="#122-语法分析"></a> 1.2.2 语法分析</h3><ul><li><p>任务：在词法分析的基础上，根据语言的语法规则， 把单词符号组成各类的语法单位：短语、子句、语句、过程、程序。</p></li><li><p>语法规则：即语言的规则，又称为文法；规定单词如何构成短语、语句、过程和程序。</p></li><li><p>语法规则的表示 - BNF：A:: =B | C</p></li></ul><p>赋值语句的语法规则</p><p>• A:: =V=E</p><p>• E:: =T | E+T</p><p>• T:: =F | T*F</p><p>• F:: =V | (E) | C</p><p>• V::= 标识符</p><p>• C::= 常数</p><ul><li>语法分析的方法 - 推导 (derive) 和归约 (reduce)</li></ul><p><strong>推导</strong>：最左推导、最右推导（规范推导）</p><p><strong>归约</strong>：最右归约、最左归约（规范规约）</p><p>例：</p><p>最右推导&amp;最左归约：</p><p><img src="https://i.loli.net/2021/01/03/uyFSU69hmwj2CcR.png" srcset="/img/loading.gif" alt="image-20210102220448968" /></p><p>最左推导&amp;最右归约：</p><p><img src="https://i.loli.net/2021/01/02/aNKEhBYxoe9F4uD.png" srcset="/img/loading.gif" alt="image-20210102220543811" /></p><p>推导时，最哪边推导则最先推导哪边的变量。归约同理。</p><p>规范推导的逆过程即规范规约。</p><p>如果推不出则说明该语句的语法错误。</p><p>语法分析过程也可以用一棵倒着的树来表示，这棵树叫做<strong>语法树</strong>。</p><p>例如：x=a+b*50的语法树</p><p><img src="https://i.loli.net/2021/01/02/B9CJqfz6PMlSNcI.png" srcset="/img/loading.gif" alt="image-20210102221121698" /></p><h3 id="123-语义分析和中间代码生成"><a class="markdownIt-Anchor" href="#123-语义分析和中间代码生成"></a> 1.2.3 语义分析和中间代码生成</h3><ul><li><p>任务：对语法分析识别出的各类语法范畴，分析其含义， 进行和初步翻译，产生介于源代码和目标代码之间 的一种代码。</p></li><li><p>分为两阶段工作：</p></li></ul><p>– 对每种语法范畴进行静态语义检查</p><p>– 若语义正确，就进行中间代码的翻译</p><ul><li>中间代码形式：四元式、三元式、逆波兰式</li></ul><p>例如将x=a+b*50变成中间代码</p><table><thead><tr><th>序号</th><th>算符</th><th>左操作数</th><th>右操作数</th><th>结果</th></tr></thead><tbody><tr><td>（1）</td><td>将整常数50转换为实常数</td><td></td><td></td><td>T1</td></tr><tr><td>（2）</td><td>*</td><td>b</td><td>T1</td><td>T2</td></tr><tr><td>（3）</td><td>+</td><td>a</td><td>T2</td><td>T3</td></tr><tr><td>（4）</td><td>=</td><td>T3</td><td></td><td>x</td></tr></tbody></table><h3 id="124-代码优化"><a class="markdownIt-Anchor" href="#124-代码优化"></a> 1.2.4 代码优化</h3><ul><li><p>任务：对前面产生的中间代码进行加工变换，以期在最后阶段能产生更为高效的目标代码。</p></li><li><p>原则：<strong>等价变换</strong></p></li><li><p>主要方面：公共子表达式的提取、合并已知量、删除无用语句、循环优化等。</p></li></ul><p>例如</p><p>将下面的语句转换成中间代码：</p><p>for (k=1;k&lt;=100;k++)</p><p>{m=i+10*k;</p><p>n=j+10*k;}</p><p>中间代码：</p><p>K=1;</p><p>10 If k&lt;=100 then</p><p>{m=i+10*k;</p><p>n=j+10*k;</p><p>k++;</p><p>goto 10;}</p><table><thead><tr><th>序号</th><th>OP</th><th>ARG1</th><th>ARG2</th><th>RESULT</th></tr></thead><tbody><tr><td>(1)</td><td>＝</td><td>1</td><td></td><td>K</td></tr><tr><td>(2)</td><td>j&lt;</td><td>100</td><td>K</td><td>(9)</td></tr><tr><td>(3)</td><td>*</td><td>10</td><td>K</td><td>T1</td></tr><tr><td>(4)</td><td>+</td><td>i</td><td>T1</td><td>M</td></tr><tr><td>(5)</td><td>*</td><td>10</td><td>K</td><td>T2</td></tr><tr><td>(6)</td><td>+</td><td>j</td><td>T2</td><td>N</td></tr><tr><td>(7)</td><td>+</td><td>k</td><td>1</td><td>K</td></tr><tr><td>(8)</td><td>j</td><td></td><td></td><td>(2)</td></tr><tr><td>(9)</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>优化后</p><table><thead><tr><th>序号</th><th>OP</th><th>ARG1</th><th>ARG2</th><th>RESULT</th></tr></thead><tbody><tr><td>（1）</td><td>＝</td><td>i</td><td></td><td>m</td></tr><tr><td>（2）</td><td>=</td><td>j</td><td></td><td>n</td></tr><tr><td>（3）</td><td>=</td><td>1</td><td></td><td>k</td></tr><tr><td>（4）</td><td>J&lt;</td><td>100</td><td>k</td><td>(9)</td></tr><tr><td>（5）</td><td>+</td><td>m</td><td>10</td><td>m</td></tr><tr><td>（6）</td><td>+</td><td>n</td><td>10</td><td>n</td></tr><tr><td>（7）</td><td>+</td><td>k</td><td>1</td><td>k</td></tr><tr><td>（8）</td><td>j</td><td></td><td></td><td>(4)</td></tr><tr><td>（9）</td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="125-目标代码生成"><a class="markdownIt-Anchor" href="#125-目标代码生成"></a> 1.2.5 目标代码生成</h3><ul><li><p>任务：把经过优化的中间代码转化成特定机器上的低级语言代码。</p></li><li><p>目标代码的形式：</p></li></ul><p>– 绝对指令代码: 可立即执行的目标代码。</p><p>– 汇编指令代码：汇编语言程序，需要通过汇编程序汇编后才能运行。</p><p>– 可重定位指令代码：先将各目标模块连接起来， 确定变量、常数在主存中的位置，装入主存后才能成为可以运行的绝对指令代码。</p><h3 id="126-表格管理"><a class="markdownIt-Anchor" href="#126-表格管理"></a> 1.2.6 表格管理</h3><ul><li><p>表格作用：用来记录源程序的各种信息以及编译过程中的各种状况。</p></li><li><p>与编译前三阶段有关的表格有：符号表、常数表、标号表、分程序入口表、中间代码表等。</p></li></ul><h3 id="127-出错处理"><a class="markdownIt-Anchor" href="#127-出错处理"></a> 1.2.7 出错处理</h3><ul><li><p>任务：如果源程序有错误，编译程序应设法发现错误， 并报告给用户。</p></li><li><p>完成：由专门的出错处理程序来完成</p></li><li><p>错误类型:</p></li></ul><p>– 语法错误：在词法分析和语法分析阶段检测出来。</p><p>– 语义错误：一般在语义分析阶段检测。</p><h3 id="128-遍"><a class="markdownIt-Anchor" href="#128-遍"></a> 1.2.8 遍</h3><ul><li>遍：指对源程序或源程序的中间结果从头到尾扫描一次，并做有关的加工处理，生成新的中间结果或目标代码的过程。</li></ul><p><em>注：遍与阶段的含义毫无关系。</em></p><p>可分为一遍扫描和多遍扫描。</p><ul><li>多遍扫描的优缺点：</li></ul><p>– 优点：节省内存空间，提高目标代码质量，使编译的逻辑结构清晰。</p><p>– 缺点：编译时间较长。</p><p><em>注：在内存许可情况下，还是遍数尽可能少些为好。</em></p><h2 id="思维导图"><a class="markdownIt-Anchor" href="#思维导图"></a> 思维导图：</h2><p><img src="https://i.loli.net/2021/01/03/EcfQpCgbWLzOeqP.png" srcset="/img/loading.gif" alt="一、概述" /></p>]]></content>
    
    
    <categories>
      
      <category>编译原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编译原理</tag>
      
      <tag>CS基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>低配Win10部署TensorFlow1.15GPU版+Keras2.15深度学习环境</title>
    <link href="/2020/11/27/%E4%BD%8E%E9%85%8DWin10%E9%83%A8%E7%BD%B2TensorFlow1-15GPU%E7%89%88-Keras2-15%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83/"/>
    <url>/2020/11/27/%E4%BD%8E%E9%85%8DWin10%E9%83%A8%E7%BD%B2TensorFlow1-15GPU%E7%89%88-Keras2-15%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<p># 低配Win10部署TensorFlow1.15GPU版+Keras2.15深度学习环境</p><p>最近打算参加一个 NLP 文本分类比赛（顺便水一下数据挖掘实验大作业），遇到一些好用的开源模型，可惜没有 PyTorch 版的，又得下回 TensorFlow1.0+ 版的了，顺便记录一下安装过程，还是挺顺利的~</p><h3 id="0x00-安装前提"><a class="markdownIt-Anchor" href="#0x00-安装前提"></a> 0x00 安装前提</h3><ol><li>装好 Anaconda 环境</li><li>装好 NVIDIA 显卡驱动</li></ol><p>我的机器配置可以看我之前写的文章<a href="https://blog.rickyxu.cc/2020/10/29/%E4%BD%8E%E9%85%8D-win10-%E9%83%A8%E7%BD%B2-pytorch-gpu-%E7%8E%AF%E5%A2%83%EF%BC%88win10-mx150-cuda10-2%EF%BC%89/">低配Win10部署TensorFlow1.15GPU版+Keras2.15深度学习环境</a></p><h3 id="0x01-安装步骤"><a class="markdownIt-Anchor" href="#0x01-安装步骤"></a> 0x01 安装步骤</h3><p>如果前面前提搞定了后面安装就两步</p><ol><li>建环境</li><li>安装</li></ol><h4 id="建环境"><a class="markdownIt-Anchor" href="#建环境"></a> 建环境</h4><p>在命令行执行指令创建一个新环境用来安装 TensorFLow，以下遇到([y]/n)?都一路按y回车</p><pre><code class="hljs bash">conda create --name tf1 python=3.6</code></pre><p>–name 后面是你自己定义的环境名称，我这里就是 tf1，后面指定环境所用的 python 版本为3.6</p><p>切换到刚刚建好的环境</p><pre><code class="hljs bash">conda activate tf1</code></pre><h4 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h4><p>安装 TensorFlow 1.15 版本和GPU版本</p><pre><code class="hljs bash">conda install tensorflow==1.15.0conda install --channel https://conda.anaconda.org/hanyucui tensorflow-gpu=1.15</code></pre><p>conda方式下载安装时不需要指定cudatoolkit的版本，因为conda会解决这种版本依赖问题同时会自动安装好CUDA所对应的cuDNN。</p><p>每个虚拟环境都需要单独安装它所对应的CUDA以及cuDNN，所以按照同样的方式新建一个环境又可以装另一个版本的 TensorFlow 环境。</p><p>安装好之后就可以测试一下效果啦</p><h3 id="0x02-安装测试"><a class="markdownIt-Anchor" href="#0x02-安装测试"></a> 0x02 安装测试</h3><p>键入python进入交互环境，随便找了别人<a href="https://zhuanlan.zhihu.com/p/107683614">文章</a>写的一段代码代码测试了一下</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tfgpu_ok = tf.test.is_gpu_available()print(<span class="hljs-string">&quot;tf version:&quot;</span>, tf.__version__)print(<span class="hljs-string">&quot;use GPU&quot;</span>, gpu_ok)</code></pre><p>结果如下：</p><p><img src="https://i.loli.net/2020/11/27/z82XOl3bGMdYsgx.png" srcset="/img/loading.gif" alt="image-20201127005843813" /></p><p>我只有一块渣渣GPU所以就显示设备0，blabla…总之有输出就证明安装成功啦~</p><p>后面就自己随便玩了~</p><p>我自己是准备比赛就装了个NLP工具库 kashgari，还有分词工具包 jieba</p><pre><code class="hljs bash">pip3 install jiebapip3 install <span class="hljs-string">&quot;kashgari&gt;=1.1,&lt;2.0&quot;</span></code></pre><p>如果pip用不了可以试下改成pip3</p><p>下好上面的包自然就把keras下载了</p><p>暂时这样，Over~</p>]]></content>
    
    
    <categories>
      
      <category>ML/DL</category>
      
      <category>环境部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境部署</tag>
      
      <tag>深度学习</tag>
      
      <tag>TensorFlow</tag>
      
      <tag>Keras</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云端部署数据科学开发环境Anaconda+Jupyterlab</title>
    <link href="/2020/11/10/%E4%BA%91%E7%AB%AF%E9%83%A8%E7%BD%B2%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83Anaconda-Jupyterlab/"/>
    <url>/2020/11/10/%E4%BA%91%E7%AB%AF%E9%83%A8%E7%BD%B2%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83Anaconda-Jupyterlab/</url>
    
    <content type="html"><![CDATA[<p>最近借舍友账号薅了阿里云云翼计划送的一台ECS服务器，选了 Ubuntu20.04 系统，打算开一个端口来和队友跑实验用，因为是同一个环境所以可以避免各种包版本不同而出的问题，出bug也可以一块解决。还有一个很赞就是，我可以用我的 iPad 甚至手机打开云端环境随时看代码，随时coding！</p><p>下面我将给出我的环境部署流程以及部署时遇到的坑和对策。</p><p>内容大致分为两部分，部署 Anaconda + 部署 Jupyterlab。</p><p>愿君有所获。</p><h2 id="0x00-云端准备"><a class="markdownIt-Anchor" href="#0x00-云端准备"></a> 0x00 云端准备</h2><h3 id="配置安全组"><a class="markdownIt-Anchor" href="#配置安全组"></a> 配置安全组</h3><p>阿里云在后台有一些安全措施限制了一些端口对外开放以确保系统安全。</p><p>进入后台点击头像那里下面有一个安全配置，设置好对外开放的端口范围即可</p><p>我一次性设置了好几个，对于jupyter来说就是你在前面配置的端口号，我配置的是8888，那么在安全组规则里就写一个8888或者8888/8890（意思是包括8888在内到8889之间的端口，其他端口号同理）</p><p>详情可见阿里云文档<a href="https://help.aliyun.com/document_detail/25471.html?spm=a2c4g.11186623.6.899.2fc72976cOcJrd">添加安全组规则</a></p><h2 id="0x01-部署anaconda"><a class="markdownIt-Anchor" href="#0x01-部署anaconda"></a> 0x01 部署Anaconda</h2><h3 id="下载anaconda"><a class="markdownIt-Anchor" href="#下载anaconda"></a> 下载Anaconda</h3><pre><code class="hljs bash">wget -P /tmp https://repo.anaconda.com/archive/Anaconda3-2020.02-Linux-x86_64.sh</code></pre><h3 id="安装anaconda"><a class="markdownIt-Anchor" href="#安装anaconda"></a> 安装Anaconda</h3><pre><code class="hljs bash">bash /tmp/Anaconda3-2020.02-Linux-x86_64.sh</code></pre><p>中间可能有一个设置安装路径的，我没理…一路回车yes完事~</p><h3 id="激活anaconda环境"><a class="markdownIt-Anchor" href="#激活anaconda环境"></a> 激活Anaconda环境</h3><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc</code></pre><h3 id="更新所有包"><a class="markdownIt-Anchor" href="#更新所有包"></a> 更新所有包</h3><pre><code class="hljs bash">conda update --all</code></pre><h3 id="创建环境"><a class="markdownIt-Anchor" href="#创建环境"></a> 创建环境</h3><p>创建一个基于 python3.6 名为 jupyter 的conda环境</p><pre><code class="hljs bash">conda create -n jupyter python=3.6</code></pre><h3 id="激活环境"><a class="markdownIt-Anchor" href="#激活环境"></a> 激活环境</h3><pre><code class="hljs bash">conda activate jupyter</code></pre><h3 id="conda环境迁移"><a class="markdownIt-Anchor" href="#conda环境迁移"></a> conda环境迁移</h3><h4 id="导出本地conda环境"><a class="markdownIt-Anchor" href="#导出本地conda环境"></a> 导出本地conda环境</h4><pre><code class="hljs bash">conda env <span class="hljs-built_in">export</span> &gt; environment.yaml</code></pre><p>将该配置文件上传到阿里云某个文件夹下</p><h4 id="导入环境"><a class="markdownIt-Anchor" href="#导入环境"></a> 导入环境</h4><pre><code class="hljs bash">conda env create -f environment.yaml</code></pre><p>文件路径应该具体到某个位置下，如果要重新命名则可以在后面加一个</p><pre><code class="hljs bash">-n 新环境名称</code></pre><p>最后我的导入环境命令如下：</p><pre><code class="hljs bash">conda env create -f ./root/environment.yaml -n myjupyter</code></pre><p>不过我并没有使用之前的conda环境，后面又重新配置了一个。</p><h4 id="迁移出错对策"><a class="markdownIt-Anchor" href="#迁移出错对策"></a> 迁移出错对策</h4><h5 id="导入报错"><a class="markdownIt-Anchor" href="#导入报错"></a> 导入报错</h5><p>导入时有可能会出现下面的报错</p><pre><code class="hljs shell">Warning: you have pip-installed dependencies in your environment file, but you do not list pip itself as one of your conda dependencies.  Conda may not use the correct pip to install your packages, and they may end up in the wrong place.  Please add an explicit pip dependency.  I&#x27;m adding one for you, but still nagging you.</code></pre><h5 id="解决方案"><a class="markdownIt-Anchor" href="#解决方案"></a> 解决方案</h5><p>在yaml配置文件中的依赖下面加一行</p><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-string">pip</span></code></pre><h3 id="更换conda源"><a class="markdownIt-Anchor" href="#更换conda源"></a> 更换conda源</h3><p>由于访问国外源下载资源可能会比较慢，一般更换成国内的源，下面使用清华源，阿里淘宝中科大等其他源同理，可以找对应官网查看。</p><pre><code class="hljs awk">conda config --add channels https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>pkgs<span class="hljs-regexp">/free/</span>conda config --add channels https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud/conda-forge conda config --add channels https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud<span class="hljs-regexp">/msys2/</span><span class="hljs-comment"># 设置搜索时显示通道地址</span>conda config --set show_channel_urls yes</code></pre><p>假如想直接写进配置文件里也可以用编辑器打开.condarc文件编辑来加入想要的源。</p><pre><code class="hljs bash">vim ~/.condarc</code></pre><p>往配置文件加入下面的文本即可</p><pre><code class="hljs bash">channels:  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/  - defaultsshow_channel_urls: <span class="hljs-literal">true</span></code></pre><p>假如换源时出现</p><pre><code class="hljs bash">ConfigurationLoadError: Unable to load configuration file.  path: /root/.condarc  reason: invalid yaml at line 2, column 0</code></pre><p>可能是哪里配置出了小问题，没关系，直接将对应路径文件删除即可</p><pre><code class="hljs bash">rm /root/.condarc</code></pre><p>然后还是按照换源的步骤重新配置一下即可。</p><h3 id="配置开发环境"><a class="markdownIt-Anchor" href="#配置开发环境"></a> 配置开发环境</h3><p>这个环境看自己需要来配置啦，我自己配的是 PyTorch ，因为跑实验用的是基于 PyTorch 框架写的代码。</p><h4 id="配置-pytorch-环境"><a class="markdownIt-Anchor" href="#配置-pytorch-环境"></a> 配置 PyTorch 环境</h4><p>这里配置的是GPU版，反正GPU版也能用CPU，torch 版本是1.6.0，在<a href="https://pytorch.org/get-started/locally/#supported-linux-distributions">PyTorch官网</a>看自己的需要来装就好。</p><pre><code class="hljs bash">conda install pytorch torchvision cudatoolkit=10.2 -c pytorch</code></pre><p>如果 torch 下载太慢安装出错了可以参考一下这篇文章的解决办法 <a href="https://blog.csdn.net/k5722166/article/details/91331016">pytorch1.1.0安装教程</a></p><p>P.S. 如果想了解在 Win10上部署 PyTorch GPU版开发环境可以参考我这一篇教程<a href="https://blog.rickyxu.cc/2020/10/29/%E4%BD%8E%E9%85%8D-win10-%E9%83%A8%E7%BD%B2-pytorch-gpu-%E7%8E%AF%E5%A2%83%EF%BC%88win10-mx150-cuda10-2%EF%BC%89/">低配 Win10 部署 PyTorch-GPU 环境（Win10+mx150+CUDA10.2）</a></p><p>进行完上面这些步骤之后anaconda算是已经部署完成了。</p><h2 id="0x02-部署-jupyter-服务"><a class="markdownIt-Anchor" href="#0x02-部署-jupyter-服务"></a> 0x02 部署 Jupyter 服务</h2><h3 id="安装-jupyterlab"><a class="markdownIt-Anchor" href="#安装-jupyterlab"></a> 安装 Jupyterlab</h3><pre><code class="hljs bash">conda install jupyter jupyterlab</code></pre><p>遇到什么 yes or no 的就一直 y 就ok了</p><h3 id="设置-jupyter-登入密码"><a class="markdownIt-Anchor" href="#设置-jupyter-登入密码"></a> 设置 Jupyter 登入密码</h3><p>安全起见一般要设置好登陆密码，当然也可以不设置（不推荐）。</p><p>Jupyterlab 安装好之后输入ipython回车进入IPython交互环境，然后输入下面两行，键入密码，确认密码。</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> notebook.auth <span class="hljs-keyword">import</span> passwdpasswd()</code></pre><p><img src="https://i.loli.net/2020/11/10/TXiPf1qmK4ux9gO.png" srcset="/img/loading.gif" alt="image-20201026205833949" /></p><pre><code class="hljs python"><span class="hljs-string">&#x27;argon2:$argon2id$v=19$m=10240,t=10,p=8$Q7DXnvrOurcEo50YfUdbYA$kzzuUEzrXvg6USTan07KUA&#x27;</span></code></pre><p>将上图中输出的一串字符串先记下来，后面设置登陆密码时要用。</p><p>如果想要重置密码则再进行一次这个步骤即可。</p><h3 id="配置-jupyter-服务"><a class="markdownIt-Anchor" href="#配置-jupyter-服务"></a> 配置 Jupyter 服务</h3><p>注意：不同的路径可能命令也不同，根据自己的来配置。</p><p>先生成配置文件</p><pre><code class="hljs bash">jupyter notebook --generate-config</code></pre><p>找到 jupyter_notebook_config.py 这个文件，然后用vim打开编辑。</p><pre><code class="hljs bash">vim /root/.jupyter/jupyter_notebook_config.py</code></pre><p>会发现里面一堆配置，莫慌</p><p>vim模式下输入命令</p><pre><code class="hljs python">:/你要查询的字段</code></pre><p>即可快速找到你要修改的字段所在位置。</p><p>例如：输入 :/c.NotebookApp.ip 即可快速找到 c.NotebookApp.ip 这个字段所在位置，以此类推。</p><pre><code class="hljs python"><span class="hljs-comment"># 将ip设置为*，允许任何IP访问</span>c.NotebookApp.ip = <span class="hljs-string">&#x27;*&#x27;</span><span class="hljs-comment"># 这里的密码就是之前生成的那一串</span>c.NotebookApp.password = <span class="hljs-string">&#x27;argon2:$argon2id$v=19$m=10240,t=10,p=8$Q7DXnvrOurcEo50YfUdbYA$kzzuUEzrXvg6USTan07KUA&#x27;</span><span class="hljs-comment"># 服务器上并没有浏览器可以供Jupyter打开</span>c.NotebookApp.open_browser = <span class="hljs-literal">False</span><span class="hljs-comment"># 监听端口设置为8888或其他自己喜欢的端口</span>c.NotebookApp.port = <span class="hljs-number">8888</span><span class="hljs-comment"># 我们可以修改jupyter的工作目录，也可以保持原样不变，如果修改的话，要保证这一目录已存在</span>c.MappingKernelManager.root_dir = <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment">#c.MappingKernelManager.root_dir = &#x27;/root/anaconda3/envs/jupyter&#x27;</span><span class="hljs-comment"># 允许远程访问</span>c.NotebookApp.allow_remote_access = <span class="hljs-literal">True</span></code></pre><p>修改完成之后输入vim命令保存退出</p><pre><code class="hljs BASH">:wq</code></pre><h3 id="切换-conda-环境"><a class="markdownIt-Anchor" href="#切换-conda-环境"></a> 切换 Conda 环境</h3><p>Jupyterlab 中切换不同的 Python 环境</p><p>在本地端连接服务器时一般需要运行不同的Python环境或者在不同环境下安装包，本地端的网页显示需要的python环境需要先装载进 kernel ，执行命令如下：</p><pre><code class="hljs bash">python -m ipykernel install --user --name xxx(环境名称) --display-name <span class="hljs-string">&quot;your name&quot;</span>（显示名称）</code></pre><p>一般步骤是进入需要添加kernel的Python环境，然后写入配置。</p><p>比如我的 conda 环境名叫 jupyter，我想要将它添加到 Jupyterlab 的 kernel 并命名显示为 PyTorch1.6.0，那就进入安装了jupyterlab的环境里输入下面这一行:</p><pre><code class="hljs bash">python -m ipykernel install --user --name jupyter --display-name <span class="hljs-string">&quot;PyTorch1.6.0&quot;</span></code></pre><p>这时候就可以在 Jupyterlab 里选择名为 PyTorch1.6.0 的环境了。</p><h3 id="运行-jupyter-服务"><a class="markdownIt-Anchor" href="#运行-jupyter-服务"></a> 运行 Jupyter 服务</h3><p>这时候应该可以运行 Jupyter 服务了，可以在你的工作目录下输入下面的命令运行一下，</p><pre><code class="hljs bash">jupyter lab --allow-root</code></pre><p><img src="https://i.loli.net/2020/11/10/brzf48hgJxRBqv1.png" srcset="/img/loading.gif" alt="image-20201026211621766" /></p><p>会看到有实时显示服务运行日志，想要终止服务则按 Ctrl + C 。</p><p>再去浏览器输入类似于这样的地址<em><a href="http://xx.xxx.xxx.xxx:8888/lab">http://xx.xxx.xxx.xxx:8888/lab</a>?</em>（服务器公网ip地址:8888）就会进到 Jupyterlab 界面了，第一次打开可能要加载一段时间，进去之后输入之前配置的密码就完事儿啦~</p><p>之后你会发现你退出终端后jupyter的服务也一起关了，怎么让他在后台一直开着以便我随时访问呢？</p><p>这时候就要用到下面的命令，后台运行挂起服务</p><pre><code class="hljs bash">nohup jupyter lab --allow-root &gt; jupyter.log 2&gt;&amp;1 &amp;</code></pre><p>nohup表示no hang up, 就是不挂起，&amp;将服务放在后台运行，这样命令执行后即使终端退出, 也不会停止服务运行。 &gt; jupyter.log 的作用是将之前实时打印的日志输出到 jupyter.log 里。</p><h3 id="结束-jupyter-服务"><a class="markdownIt-Anchor" href="#结束-jupyter-服务"></a> 结束 Jupyter 服务</h3><p>若想结束 Jupyter 服务则输入命令 ps 列出当前在运行的进程</p><p><img src="https://i.loli.net/2020/11/10/IPFa8hM4ZO1C2oy.png" srcset="/img/loading.gif" alt="image-20201026215508941" /></p><p>找到 jupyter-lab 服务的 pid ，然后 kill pid 终止进程。（我这个不知道为什么没有kill成功，可能是当前会话还没有关闭？）</p><h3 id="jupyterlab-插件"><a class="markdownIt-Anchor" href="#jupyterlab-插件"></a> Jupyterlab 插件</h3><p>没有用 Jupyter Notebook 而是用 Jupyterlab 的原因主要是因为jupyterlab有插件功能，相当于强化版的 Jupyter Notebook，目前市场上有的插件暂时还没有很多，希望以后会和 VScode 的插件一样丰富吧。</p><p>大部分插件都是基于 Nodejs ，所以要下载一个。输入下面的命令下载即可。</p><pre><code class="hljs bash">conda install nodejs</code></pre><p>一堆插件自己看着下载，我自己也还没怎么用，代码补全功能那个插件有些坑，之后考虑出篇插件推荐。</p><p>以上全部步骤配置完之后应该就能正常访问你的云端数据科学开发环境了，拿起你的键盘，就这样踏上数据科学的旅途吧~</p>]]></content>
    
    
    <categories>
      
      <category>ML/DL</category>
      
      <category>环境部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境部署</tag>
      
      <tag>Anaconda</tag>
      
      <tag>Jupyterlab</tag>
      
      <tag>数据科学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>低配 Win10 部署 PyTorch-GPU 深度学习环境（Win10+mx150+CUDA10.2）</title>
    <link href="/2020/10/29/%E4%BD%8E%E9%85%8D-Win10-%E9%83%A8%E7%BD%B2-PyTorch-GPU-%E7%8E%AF%E5%A2%83%EF%BC%88Win10-mx150-CUDA10-2%EF%BC%89/"/>
    <url>/2020/10/29/%E4%BD%8E%E9%85%8D-Win10-%E9%83%A8%E7%BD%B2-PyTorch-GPU-%E7%8E%AF%E5%A2%83%EF%BC%88Win10-mx150-CUDA10-2%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p># 低配 Win10 部署 PyTorch-GPU 深度学习环境（Win10+mx150+CUDA10.2）</p><h2 id="0x00-写在前面"><a class="markdownIt-Anchor" href="#0x00-写在前面"></a> 0x00 写在前面</h2><p>本文可能不适用于所有人，只是作为我自己的一次记录，完文时间是2020.7.14，一直存在本地没找时间发布，时隔4月直至今天才发。文章大致分为四部分：我的配置、安装 CUDA 、安装 cuDNN 和安装 PyTorch ，只希望读者读完之后能省时间，少踩坑，愿君有所获。</p><h3 id="我的配置清单"><a class="markdownIt-Anchor" href="#我的配置清单"></a> 我的配置清单</h3><p>笔电型号配置: 小米Pro（2018版8G+256G原配固态+256G自加固态）</p><p>OS: Win10 Pro Education 64-bit（家庭版应该也差不多）</p><p>GPU: GeForce MX150</p><p>使用Anaconda进行python包管理</p><p>提前装好 Visual Studio 2015或以上版本（community即可）</p><h3 id="探探情况"><a class="markdownIt-Anchor" href="#探探情况"></a> 探探情况</h3><p>先去<a href="https://pytorch.org/">PyTorch官网</a>看看最新稳定版支持什么</p><p><img src="https://i.loli.net/2020/10/29/aBqGKeASiwyFsgm.png" srcset="/img/loading.gif" alt="image-20200714175513350" /></p><p>可以看到它支持Windows系统，且当你用conda来管理python包时，使用GPU训练CUDA可选的版本是9.2、10.1、10.2</p><p>如果使用CPU训练那么可以选择none，不使用CUDA加速。</p><p>虽然MX150真的很辣鸡，但我这里选择的版本依然还是GPU版。</p><p>下面是详细步骤，按我步骤来包你1h搞定（此处使用了夸张的修辞手法）。</p><h2 id="0x01-安装cuda"><a class="markdownIt-Anchor" href="#0x01-安装cuda"></a> 0x01 安装CUDA</h2><h3 id="查看支持的cuda版本"><a class="markdownIt-Anchor" href="#查看支持的cuda版本"></a> 查看支持的CUDA版本</h3><p>更新好驱动后就查看你的驱动所支持的CUDA版本</p><p>打开NVIDIA控制面板-&gt;帮助-&gt;系统信息-&gt;组件</p><p>查看支持版本。</p><p><img src="https://i.loli.net/2020/10/29/kED43Qu6Aor7Gwe.png" srcset="/img/loading.gif" alt="image-20200714173403609" /></p><p>如果发现版本不够高的话可以选择其他版本，如CUDA10.1，大致的流程也是类似的。</p><p>或者可以选择更新驱动到最新版本，我这里驱动更新到最新版时对应的CUDA版本恰好为10.2。</p><h3 id="更新驱动"><a class="markdownIt-Anchor" href="#更新驱动"></a> 更新驱动</h3><p>将显卡驱动升级到最新版本（我的驱动程序版本是442.50）</p><p>可以去NVIDIA官网下载更新，也可以用驱动精灵检测更新。之前装tensorflow时找配适的驱动在官网装感觉有点麻烦，所以这次我直接用驱动精灵装，一路按提示安装就行了，感觉比较省事。（驱动精灵用完就可以卸载了，就一工具软件。）</p><h3 id="下载对应版本的cuda"><a class="markdownIt-Anchor" href="#下载对应版本的cuda"></a> 下载对应版本的CUDA</h3><p>到官网下载<a href="https://developer.nvidia.com/cuda-10.2-download-archive?target_os=Windows&amp;target_arch=x86_64&amp;target_version=10&amp;target_type=exelocal">CUDA10.2</a></p><p>随便点一个都可以下载，这里建议选择下载到local，使用第三方下载器估计会比较快。</p><p>对Windows用户来说，大多数深度学习框架底层是基于C/C++开发的，需要提前装好 Visual Studio 2015或以上版本。</p><p>下载好后点击exe文件，也是一路按提示安装就完事儿。</p><h3 id="安装验证"><a class="markdownIt-Anchor" href="#安装验证"></a> 安装验证</h3><p>在命令行输入</p><pre><code class="hljs bash">nvcc -V</code></pre><p>如果输出结果如下图所示返回CUDA版本号10.2，说明安装成功。</p><p><img src="https://i.loli.net/2020/10/29/QRiVTaUMdlztBZ2.png" srcset="/img/loading.gif" alt="image-20200714182810649" /></p><h2 id="0x02-安装cudnn"><a class="markdownIt-Anchor" href="#0x02-安装cudnn"></a> 0x02 安装cuDNN</h2><h3 id="下载安装"><a class="markdownIt-Anchor" href="#下载安装"></a> 下载安装</h3><p>进入<a href="https://developer.nvidia.com/rdp/cudnn-download">官网</a>登录后下载cuDNN v7.6.5 for CUDA 10.2</p><p><img src="https://i.loli.net/2020/10/29/kg4r7UwMzmCxBHi.png" srcset="/img/loading.gif" alt="image-20200714183949020" /></p><p>这一步选择对应的CUDA版本即可，我选择<a href="https://developer.nvidia.com/compute/machine-learning/cudnn/secure/7.6.5.32/Production/10.2_20191118/cudnn-10.2-windows10-x64-v7.6.5.32.zip">cuDNN Library for Windows 10</a>，下载后得到一个zip压缩包，里面包含了bin、include、lib三个文件夹，解压，把各个文件夹里的文件放到 C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA下同名的文件夹，配置好环境变量即可。</p><p>如果前面没有自定义安装路径，按照默认则需要添加下面两个路径：</p><p>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2</p><p>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2\lib\x64</p><h3 id="安装验证-2"><a class="markdownIt-Anchor" href="#安装验证-2"></a> 安装验证</h3><p>在路径C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2\extras\demo_suite下打开命令行输入</p><pre><code class="hljs bash">./bandwidthtest.exe</code></pre><p>得到下图的结果说明安装成功</p><p><img src="https://i.loli.net/2020/10/29/4gzvjbdTrQwOhYe.png" srcset="/img/loading.gif" alt="image-20200714205713708" /></p><p>此外，还可以添加<code>C:\Program Files\NVIDIA Corporation\NVSMI\</code>到系统变量中，查看显卡使用情况时就可以直接在命令行输入</p><pre><code class="hljs bash">nvidia-smi</code></pre><p>得到显卡使用情况</p><p><img src="https://i.loli.net/2020/10/29/zuE1DINkqAVmBs5.png" srcset="/img/loading.gif" alt="image-20200714214650508" /></p><h2 id="0x03-安装pytorch"><a class="markdownIt-Anchor" href="#0x03-安装pytorch"></a> 0x03 安装PyTorch</h2><h3 id="anaconda换源"><a class="markdownIt-Anchor" href="#anaconda换源"></a> Anaconda换源</h3><p>如果不换源会下载龟速以至于不能实现1h内搞定这个教程，这里我用了清华的源。</p><p>打开Anaconda Prompt</p><p>先创建一个命名为pytorch_gpu的python版本为3.6的环境</p><pre><code class="hljs bash">conda create -n pytorch_gpu pip python=3.6</code></pre><p>激活pytorch_gpu环境</p><pre><code class="hljs bash">conda activate pytorch_gpu</code></pre><p>查看Anaconda配置</p><pre><code class="hljs bash">conda config --show</code></pre><p>添加清华源</p><pre><code class="hljs bash">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/menpo/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</code></pre><p>设置搜索时显示通道地址</p><pre><code class="hljs bash">conda config --<span class="hljs-built_in">set</span> show_channel_urls yes</code></pre><p>然后在PyTorch官网那里复制conda的命令</p><pre><code class="hljs bash">conda install pytorch torchvision cudatoolkit=10.2 -c pytorch</code></pre><p>把其中的 -c pytorch去掉</p><p>在命令行中输入</p><pre><code class="hljs bash">conda install pytorch torchvision cudatoolkit=10.2</code></pre><p>上面所有步骤中需要下载的话输入y回车就好。</p><p>等待下载完成。</p><h3 id="pytorch安装验证"><a class="markdownIt-Anchor" href="#pytorch安装验证"></a> PyTorch安装验证</h3><p>运行简单的样例代码测试，例如打印出随机生成的张量矩阵，以及gpu是否可以使用。</p><p>首先在命令行输入python，进入python的解释器，依次输入以下命令，每输入一句回车</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchx = torch.rand(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>)print(x)torch.cuda.is_available()</code></pre><p>运行内容类似于以下则说明PyTorch安装成功且支持GPU计算：</p><pre><code class="hljs bash">&gt;&gt;&gt; import torch&gt;&gt;&gt; x = torch.rand(5,3)&gt;&gt;&gt; <span class="hljs-built_in">print</span>(x)tensor([[0.9752, 0.3114, 0.4016],        [0.9716, 0.3168, 0.8434],        [0.5170, 0.6517, 0.4141],        [0.5586, 0.6290, 0.4637],        [0.8503, 0.0334, 0.4124]])&gt;&gt;&gt; torch.cuda.is_available()True</code></pre><h2 id="0x04-致谢"><a class="markdownIt-Anchor" href="#0x04-致谢"></a> 0x04 致谢</h2><p>感谢前人留下的足迹，这篇文章才能顺利走到这里，接下来开始你的炼丹之旅吧~</p><p><a href="https://zhuanlan.zhihu.com/p/131595687">win10+mx150环境下安装cuda，cudnn，pytorch-gpu</a></p><p><a href="https://zhuanlan.zhihu.com/p/54350088">windows10下安装GPU版pytorch简明教程</a></p><p><a href="https://zhuanlan.zhihu.com/p/94220564">win10安装CUDA和cuDNN的正确姿势</a></p><p><a href="https://blog.csdn.net/xo3ylAF9kGs/article/details/104104041">pytorch慢到无法安装，该怎么办？</a></p>]]></content>
    
    
    <categories>
      
      <category>ML/DL</category>
      
      <category>环境部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境部署</tag>
      
      <tag>PyTorch</tag>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu18.04安装配置MySQL5.7数据库远程连接</title>
    <link href="/2020/09/11/MySQL5.7_remote_config_on_Ubuntu18.04/"/>
    <url>/2020/09/11/MySQL5.7_remote_config_on_Ubuntu18.04/</url>
    
    <content type="html"><![CDATA[<p># Ubuntu18.04安装配置MySQL5.7数据库远程连接</p><p>课程设计时因为电脑没啥内存，就在Ubuntu服务器上配置了MySQL远程用</p><p>命令行记录如下：</p><p>下载一些包</p><pre><code class="hljs bash">su <span class="hljs-comment"># 登入超级用户</span>apt-get install mysql-serverapt-get install mysql-clientapt-get install libmysqlclient-devapt install net-tools <span class="hljs-comment"># 用于查看服务状态</span>sudo netstat -tap | grep mysql</code></pre><p><img src="https://i.loli.net/2021/01/09/hKLeJDkQNXUxtiV.png" srcset="/img/loading.gif" alt="image-20210109154326377" /></p><p>状态为LISTEN即可</p><pre><code class="hljs bash">mysql -u root -p <span class="hljs-comment"># 默认root用户初始密码为空</span></code></pre><p>进入数据库后显示 mysql&gt;</p><p>改密码</p><pre><code class="hljs bash">GRANT ALL PRIVILEGES ON *.* TO root@localhost IDENTIFIED BY <span class="hljs-string">&quot;123456&quot;</span>;</code></pre><p>新建数据库</p><pre><code class="hljs bash">CREATE DATABASE edusys;</code></pre><p>新增用户</p><pre><code class="hljs bash">GRANT ALL PRIVILEGES ON edusys.* TO ricky@localhost IDENTIFIED BY <span class="hljs-string">&quot;ricky&quot;</span>;</code></pre><p>允许用户可以从任意地址访问</p><pre><code class="hljs bash">mysql&gt; GRANT ALL PRIVILEGES ON edusys.* TO ricky@<span class="hljs-string">&quot;%&quot;</span> IDENTIFIED BY <span class="hljs-string">&quot;ricky&quot;</span>;</code></pre><p>退出mysql</p><pre><code class="hljs bash"><span class="hljs-built_in">exit</span></code></pre><p>修改配置文件</p><pre><code class="hljs bash">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</code></pre><p><img src="https://i.loli.net/2021/01/09/R9SKC6BWfeXu1vM.png" srcset="/img/loading.gif" alt="image-20210109155120911" /></p><p>127.0.0.1改成0.0.0.0</p><p><img src="https://i.loli.net/2021/01/09/8WCRsh62GNQzgfn.png" srcset="/img/loading.gif" alt="image-20210109155157161" /></p><p>重启MySQL服务</p><pre><code class="hljs bash">service mysql restart</code></pre><p>用navicat远程连接服务器上的MySQL，用户名密码就是前面配置的。</p><p><img src="https://i.loli.net/2021/01/09/5nh2C6DfQigjurc.png" srcset="/img/loading.gif" alt="image-20210109155714951" /></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>环境部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境部署</tag>
      
      <tag>MySQL</tag>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2018/09/23/hello-world/"/>
    <url>/2018/09/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="快速开始"><a class="markdownIt-Anchor" href="#快速开始"></a> 快速开始</h2><h3 id="创建新文章"><a class="markdownIt-Anchor" href="#创建新文章"></a> 创建新文章</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="运行本地服务"><a class="markdownIt-Anchor" href="#运行本地服务"></a> 运行本地服务</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="快速部署"><a class="markdownIt-Anchor" href="#快速部署"></a> 快速部署</h3><pre><code class="hljs bash">$ hexo clean$ hexo g -d</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
